import os
import psycopg2
import json
from datetime import date, timedelta
from psycopg2 import pool, InterfaceError # <-- –î–æ–¥–∞–Ω–æ InterfaceError
import contextlib
import logging # <-- –î–æ–¥–∞–Ω–æ logging

# from dotenv import load_dotenv
# load_dotenv()

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞ ---
logger = logging.getLogger(__name__)
# –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
if not logger.hasHandlers():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# --- –ö—ñ–Ω–µ—Ü—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞ ---


# -----------------------------
# Connection Pool
# -----------------------------
try:
    db_pool = psycopg2.pool.SimpleConnectionPool(
        minconn=1,
        maxconn=10,
        dbname=os.getenv("PG_DBNAME"),
        user=os.getenv("PG_USER"),
        password=os.getenv("PG_PASSWORD"),
        host=os.getenv("PG_HOST"),
        port=os.getenv("PG_PORT"),
        sslmode="require",
    )
    logger.info("‚úÖ –ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –∑ PostgreSQL —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
except Exception as e:
    logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å: {e}", exc_info=True)
    db_pool = None

# -----------------------------
# –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è connect()
# -----------------------------
@contextlib.contextmanager
def connect():
    if db_pool is None:
        logger.critical("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        raise Exception("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")

    con = None
    retries = 1 # –î–æ–∑–≤–æ–ª—è—î–º–æ –æ–¥–Ω—É –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É

    while retries >= 0:
        need_retry = False
        try:
            con = db_pool.getconn() # –ë–µ—Ä–µ–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
            # --- –ü–ï–†–ï–í–Ü–†–ö–ê –ó'–Ñ–î–ù–ê–ù–ù–Ø ---
            con.cursor().execute("SELECT 1")
            # --- –ó'—î–¥–Ω–∞–Ω–Ω—è –∂–∏–≤–µ ---

            yield con # –í—ñ–¥–¥–∞—î–º–æ –∂–∏–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
            con.commit() # Commit, —è–∫—â–æ 'with' –±–ª–æ–∫ –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ
            break # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É, –≤—Å–µ –≥–∞—Ä–∞–∑–¥

        except (psycopg2.OperationalError, InterfaceError) as e: # –õ–æ–≤–∏–º–æ –ø–æ–º–∏–ª–∫—É "–º–µ—Ä—Ç–≤–æ–≥–æ" –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º –ë–î ({type(e).__name__}): {e}. –°–ø—Ä–æ–±–∞ {1-retries}/1...")
            if con:
                try:
                    db_pool.putconn(con, close=True) # –°–∫–∞–∂–µ–º–æ –ø—É–ª—É –ø—Ä–∏–±—Ä–∞—Ç–∏ —Ü–µ "–ø–æ–≥–∞–Ω–µ" –∑'—î–¥–Ω–∞–Ω–Ω—è
                    logger.info("–ü–æ–≥–∞–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –ø—É–ª –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è.")
                except InterfaceError: # –Ø–∫—â–æ –≤–æ–Ω–æ –≤–∂–µ –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–µ –∑–æ–≤–Ω—ñ
                    logger.warning("–°–ø—Ä–æ–±–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è.")
                except Exception as put_err: # –Ü–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ putconn
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –ø–æ–≥–∞–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤ –ø—É–ª: {put_err}")
                con = None # –°–∫–∏–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—É con

            retries -= 1
            if retries < 0:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–∏–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏.")
                raise ConnectionError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–∏–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î.") from e
            need_retry = True # –ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–æ–≤–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É

        except Exception as e_other: # –õ–æ–≤–∏–º–æ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, SQL-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É)
            logger.error(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –ë–î: {e_other}", exc_info=True)
            if con:
                try:
                    con.rollback() # –†–æ–±–∏–º–æ rollback –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
                except InterfaceError: # –Ø–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏–ª–æ—Å—å –ø—ñ–¥ —á–∞—Å rollback
                    logger.warning("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏–ª–æ—Å—å –ø—ñ–¥ —á–∞—Å rollback.")
                except Exception as rb_err:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å rollback: {rb_err}")
            raise # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ

        finally:
            # –Ø–∫—â–æ –º–∏ –ù–ï –ø–æ—Ç—Ä–µ–±—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –Ü –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å–µ —â–µ —ñ—Å–Ω—É—î,
            # –∑–Ω–∞—á–∏—Ç—å yield –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–≤, —ñ —Ç—Ä–µ–±–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ con –≤ –ø—É–ª.
            # –Ø–∫—â–æ –±—É–ª–∞ OperationalError, con –≤–∂–µ None –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏–π –∑ close=True.
            if not need_retry and con:
                try:
                    db_pool.putconn(con) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∂–∏–≤–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤ –ø—É–ª
                    con = None # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
                except InterfaceError:
                    logger.warning("–°–ø—Ä–æ–±–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.")
                except Exception as final_put_err:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –≤ –ø—É–ª: {final_put_err}")


# -----------------------------
# Schema init (safe idempotent)
# -----------------------------
def init_db():
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username TEXT,
                display_name TEXT,
                score INTEGER DEFAULT 0,
                topic TEXT,
                last_daily DATE, -- üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: TEXT -> DATE
                feedbacks INTEGER DEFAULT 0,
                all_tasks_completed INTEGER DEFAULT 0,
                topics_total INTEGER DEFAULT 0,
                topics_completed INTEGER DEFAULT 0,
                last_activity DATE,
                streak_days INTEGER DEFAULT 0,
                city TEXT,
                phone_number TEXT
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                id SERIAL PRIMARY KEY,
                category TEXT,
                topic TEXT NOT NULL,
                level TEXT NOT NULL,
                task_type TEXT,
                question TEXT NOT NULL,
                answer JSONB NOT NULL, -- üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: TEXT -> JSONB
                explanation TEXT,
                photo TEXT,
                is_daily BOOLEAN DEFAULT FALSE -- üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: INTEGER -> BOOLEAN
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS completed_tasks (
                user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                task_id INTEGER NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
                PRIMARY KEY (user_id, task_id)
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS feedback (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
                username TEXT,
                message TEXT,
                timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP -- üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ TIME ZONE
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS badges (
                user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                badge TEXT NOT NULL,
                PRIMARY KEY (user_id, badge)
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_topic_streaks (
                user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                topic   TEXT    NOT NULL,
                streak  INTEGER NOT NULL DEFAULT 0,
                PRIMARY KEY (user_id, topic)
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS user_topic_streak_awards (
                user_id   BIGINT  NOT NULL,
                topic     TEXT    NOT NULL,
                milestone INTEGER NOT NULL,
                PRIMARY KEY (user_id, topic, milestone),
                -- üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: FOREIGN KEY –º–∞—î –ø–æ—Å–∏–ª–∞—Ç–∏—Å—å –Ω–∞ user_topic_streaks –¥–ª—è —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
                FOREIGN KEY (user_id, topic) REFERENCES user_topic_streaks(user_id, topic) ON DELETE CASCADE
            )
        """)

        # –Ü–Ω–¥–µ–∫—Å–∏
        cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_topic_daily ON tasks (topic, is_daily)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_topic_level ON tasks (topic, level)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_category ON tasks (category)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_feedback_user_time ON feedback (user_id, timestamp DESC)")
        # "idx_completed_user" –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –ø–æ–∫—Ä–∏–≤–∞—î—Ç—å—Å—è PRIMARY KEY
        cur.execute("CREATE INDEX IF NOT EXISTS idx_completed_task ON completed_tasks (task_id)")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_is_daily ON tasks (is_daily)")
        # "idx_streaks_user_topic" –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –ø–æ–∫—Ä–∏–≤–∞—î—Ç—å—Å—è PRIMARY KEY
        cur.execute("CREATE INDEX IF NOT EXISTS idx_streak_awards_user_topic ON user_topic_streak_awards (user_id, topic)")
        # üîÑ –î–û–î–ê–ù–û: –Ü–Ω–¥–µ–∫—Å –¥–ª—è JSONB
        cur.execute("CREATE INDEX IF NOT EXISTS idx_tasks_answer_gin ON tasks USING GIN (answer)")


        con.commit()
    logger.info("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")


# -----------------------------
# Users
# -----------------------------
def get_user(user_id):
    with connect() as con:
        cur = con.cursor()
        cur.execute("SELECT * FROM users WHERE id = %s", (user_id,))
        return cur.fetchone()

def create_or_get_user(user_id):
    if not get_user(user_id):
        with connect() as con:
            con.cursor().execute(
                "INSERT INTO users (id) VALUES (%s) ON CONFLICT DO NOTHING",
                (user_id,),
            )
    return get_user(user_id)

def update_user(user_id, field, value):
    with connect() as con:
        # –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ –ø–æ–ª—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ SQL —ñ–Ω'—î–∫—Ü—ñ–π, —è–∫—â–æ field –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∑–æ–≤–Ω—ñ
        allowed_fields = {"username", "display_name", "score", "topic", "last_daily", 
                          "feedbacks", "all_tasks_completed", "topics_total", 
                          "topics_completed", "last_activity", "streak_days", 
                          "city", "phone_number"}
        if field not in allowed_fields:
            logger.error(f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ '{field}' –¥–ª—è user {user_id}")
            raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {field}")
            
        con.cursor().execute(
            f"UPDATE users SET {field} = %s WHERE id = %s",
            (value, user_id),
        )

def add_score(user_id, delta):
    with connect() as con:
        con.cursor().execute(
            "UPDATE users SET score = score + %s WHERE id = %s",
            (delta, user_id),
        )

def get_user_field(user_id, field):
    # –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ –ø–æ–ª—è
    allowed_fields = {"id", "username", "display_name", "score", "topic", "last_daily", 
                      "feedbacks", "all_tasks_completed", "topics_total", 
                      "topics_completed", "last_activity", "streak_days", 
                      "city", "phone_number"}
    if field not in allowed_fields:
         logger.error(f"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ '{field}' –¥–ª—è user {user_id}")
         raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {field}")
             
    with connect() as con:
        cur = con.cursor()
        cur.execute(f"SELECT {field} FROM users WHERE id = %s", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None

def get_level_by_score(score):
    if score is None: score = 0 # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ score —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if score < 30:
        return "–ù–æ–≤–∞—á–æ–∫"
    elif score < 100:
        return "–°–µ—Ä–µ–¥–Ω—ñ–π"
    else:
        return "–ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≥—É—Ä—É"

# -----------------------------
# Tasks
# -----------------------------
def get_random_task(topic=None, level=None, user_id=None, is_daily=None):
    with connect() as con:
        cur = con.cursor()
        query = """
            SELECT id, category, topic, level, task_type, question, answer, explanation, photo, is_daily
            FROM tasks
            WHERE 1=1
        """
        params = []
        if topic:
            query += " AND topic = %s"; params.append(topic)
        if level:
            query += " AND level = %s"; params.append(level)
        if is_daily is not None:
            # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: int(is_daily) -> bool(is_daily)
            query += " AND is_daily = %s"; params.append(bool(is_daily)) 
        if user_id:
            # –ü–µ—Ä–µ–∫–æ–Ω–∞–π–º–æ—Å—è, —â–æ user_id –Ω–µ None –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –ø—ñ–¥–∑–∞–ø–∏—Ç—É
            if user_id is not None:
                query += " AND id NOT IN (SELECT task_id FROM completed_tasks WHERE user_id = %s)"
                params.append(user_id)

        query += " ORDER BY RANDOM() LIMIT 1"
        cur.execute(query, tuple(params))
        row = cur.fetchone()
        if row:
            try:
                # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 'answer' —Ç–µ–ø–µ—Ä JSONB, psycopg2 –ø–æ–≤–µ—Ä–Ω–µ dict/list, json.loads –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
                answer_list = row[6] 
                if isinstance(answer_list, str): # –ü—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –¥–∞–Ω—ñ —â–µ —Å—Ç–∞—Ä—ñ
                    answer_list = json.loads(answer_list)
            except json.JSONDecodeError:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–¥–∞—á—ñ ID={row[0]}: {row[6]}")
                answer_list = [] # –∞–±–æ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            return {
                "id": row[0], "category": row[1], "topic": row[2], "level": row[3],
                "task_type": row[4], "question": row[5], "answer": answer_list,
                "explanation": row[7], "photo": row[8], "is_daily": row[9],
            }
    return None

def add_task(data):
    category = data.get("category")
    # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: psycopg2 —Å–∞–º –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç—å dict –≤ JSONB, json.dumps –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
    answer_json_or_dict = data.get("answer", []) 
    with connect() as con:
        con.cursor().execute("""
            INSERT INTO tasks (category, topic, level, task_type, question, answer, explanation, photo, is_daily)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            category,
            data["topic"],
            data.get("level") or "",
            data.get("task_type"),
            data["question"],
            answer_json_or_dict, # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û
            data.get("explanation"), # –î–æ–¥–∞–º–æ get –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            data.get("photo"),
            data.get("is_daily", False), # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 0 -> False
        ))

def get_all_tasks_by_topic(topic, is_daily=False): # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 0 -> False
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT id, category, topic, level, task_type, question, answer, explanation, photo, is_daily
            FROM tasks
            WHERE topic = %s AND is_daily = %s
            ORDER BY id
        """, (topic, is_daily)) # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä–∞–º–µ—Ç—Ä –≤–∂–µ boolean
        rows = cur.fetchall()
        tasks = []
        for row in rows:
            try:
                # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 'answer' —Ç–µ–ø–µ—Ä JSONB
                answer_list = row[6]
                if isinstance(answer_list, str):
                    answer_list = json.loads(answer_list)
            except json.JSONDecodeError:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–¥–∞—á—ñ ID={row[0]}: {row[6]}")
                answer_list = []
            tasks.append({
                "id": row[0], "category": row[1], "topic": row[2], "level": row[3],
                "task_type": row[4], "question": row[5], "answer": answer_list,
                "explanation": row[7], "photo": row[8], "is_daily": row[9],
            })
        return tasks

def all_tasks_completed(user_id, topic, level):
    with connect() as con:
        cur = con.cursor()
        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("SELECT id FROM tasks WHERE topic=%s AND level=%s AND is_daily=FALSE", (topic, level)) 
        all_ids = set(r[0] for r in cur.fetchall())
        if not all_ids: # –Ø–∫—â–æ –∑–∞–¥–∞—á –Ω–µ–º–∞—î, —Ç–æ –Ω–µ –º–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏, —â–æ –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω–æ
             return False
        cur.execute("""
            SELECT task_id
            FROM completed_tasks ct JOIN tasks t ON ct.task_id = t.id
            WHERE ct.user_id=%s AND t.topic=%s AND t.level=%s AND t.is_daily=FALSE
        """, (user_id, topic, level)) # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        done_ids = set(r[0] for r in cur.fetchall())
        return all_ids == done_ids

def get_task_by_id(task_id):
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT id, category, topic, level, task_type, question, answer, explanation, photo, is_daily
            FROM tasks WHERE id = %s
        """, (task_id,))
        row = cur.fetchone()
        if row:
            try:
                # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 'answer' —Ç–µ–ø–µ—Ä JSONB
                answer_list = row[6]
                if isinstance(answer_list, str):
                    answer_list = json.loads(answer_list)
            except json.JSONDecodeError:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–¥–∞—á—ñ ID={row[0]}: {row[6]}")
                answer_list = []
            return {
                "id": row[0], "category": row[1], "topic": row[2], "level": row[3],
                "task_type": row[4], "question": row[5], "answer": answer_list,
                "explanation": row[7], "photo": row[8], "is_daily": row[9],
            }
    return None

def delete_task(task_id):
    with connect() as con:
        con.cursor().execute("DELETE FROM tasks WHERE id = %s", (task_id,))

def update_task_field(task_id, field, value):
     # –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ñ –ø–æ–ª—è
    allowed_fields = {"category", "topic", "level", "task_type", "question", 
                      "answer", "explanation", "photo", "is_daily"}
    if field not in allowed_fields:
        logger.error(f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ '{field}' –¥–ª—è task {task_id}")
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–µ –ø–æ–ª–µ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ: {field}")
        
    # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ø–∫—â–æ –æ–Ω–æ–≤–ª—é—î–º–æ 'answer' —ñ —Ü–µ –Ω–µ JSONB-—Å—É–º—ñ—Å–Ω–∏–π dict/list, 
    # —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞—Å—Ç–∞—Ä–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ json.dumps
    if field == 'answer' and not isinstance(value, (dict, list)):
         try:
            # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –ø—Ä–∏–π—à–æ–≤ —Ä—è–¥–æ–∫, —è–∫–∏–π —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ JSON
            # –ê–±–æ —â–æ –ø—Ä–∏–π—à–æ–≤ dict/list, —è–∫–∏–π —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —è–∫ JSON
             value = json.dumps(value) 
         except TypeError:
             logger.warning(f"–ù–µ–∑–≤–∏—á–∞–π–Ω–∏–π —Ç–∏–ø –¥–ª—è –ø–æ–ª—è 'answer' task {task_id}: {value}. –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —è–∫ —î.")
             # –Ø–∫—â–æ —Ü–µ –≤–∂–µ dict/list, psycopg2 –≤–ø–æ—Ä–∞—î—Ç—å—Å—è
             if isinstance(value, (dict, list)):
                pass # –í—Å–µ –æ–∫
             else: # –Ø–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫, –∞–ª–µ –Ω–µ JSON, –±–∞–∑–∞ –º–æ–∂–µ –≤–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON –¥–ª—è task {task_id}: {value}")
                raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è JSON")
    
    # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–ª—è is_daily –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Ü–µ boolean
    if field == 'is_daily':
        value = bool(value)

    with connect() as con:
        con.cursor().execute(
            f"UPDATE tasks SET {field} = %s WHERE id = %s",
            (value, task_id),
        )

def get_all_topics(is_daily=False): # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 0 -> False
    with connect() as con:
        cur = con.cursor()
        cur.execute(
            "SELECT DISTINCT topic FROM tasks WHERE is_daily=%s",
            (is_daily,), # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–±—Ä–∞–Ω–æ int()
        )
        topics = [row[0] for row in cur.fetchall() if row[0]] # –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None/–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
        forbidden = {"üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É", "–†–∞–Ω–¥–æ–º–Ω–∞ —Ç–µ–º–∞", "‚ùå –ù–µ–º–∞—î —Ç–µ–º", ""} # –î–æ–¥–∞–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
        clean_topics = [t for t in topics if t and t not in forbidden and len(t) > 1]
        return clean_topics

# -----------------------------
# Feedback / rating / badges
# -----------------------------
def get_all_feedback():
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT id, user_id, username, message, timestamp
            FROM feedback
            ORDER BY timestamp DESC
        """)
        # –û–±–µ—Ä–µ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ timestamp —É —Ä—è–¥–æ–∫, —è–∫—â–æ —Ç—Ä–µ–±–∞
        return [(id, uid, uname, msg, ts.strftime('%Y-%m-%d %H:%M:%S') if ts else None) 
                for id, uid, uname, msg, ts in cur.fetchall()]


def get_user_completed_count(user_id, topic, level):
    with connect() as con:
        cur = con.cursor()
        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("""
            SELECT COUNT(ct.task_id)
            FROM completed_tasks ct JOIN tasks t ON ct.task_id = t.id
            WHERE ct.user_id = %s AND t.topic=%s AND t.level=%s AND t.is_daily=FALSE
        """, (user_id, topic, level))
        result = cur.fetchone()
        return result[0] if result else 0

def get_top_users(limit=10):
    with connect() as con:
        cur = con.cursor()
        # –î–æ–¥–∞–º–æ —Ñ—ñ–ª—å—Ç—Ä score > 0, —â–æ–± –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω—É–ª—å–æ–≤–∏—Ö
        cur.execute("SELECT id, score FROM users WHERE score > 0 ORDER BY score DESC LIMIT %s", (limit,))
        return cur.fetchall()

def get_user_rank(user_id):
    with connect() as con:
        cur = con.cursor()
        # –†–∞—Ö—É—î–º–æ —Ä–∞–Ω–≥ —Ç—ñ–ª—å–∫–∏ —Å–µ—Ä–µ–¥ —Ç–∏—Ö, —Ö—Ç–æ –º–∞—î –±–∞–ª–∏
        cur.execute("SELECT id, score FROM users WHERE score > 0 ORDER BY score DESC")
        rows = cur.fetchall()
        total_ranked_users = len(rows)
        for rank, (uid, score) in enumerate(rows, start=1):
            if uid == user_id:
                return rank, score, total_ranked_users
        # –Ø–∫—â–æ —é–∑–µ—Ä–∞ –Ω–µ–º–∞—î –≤ —Ä–µ–π—Ç–∏–Ω–≥—É (score=0), –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
        # –ê–ª–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—Ö—É—î–º–æ –ø–æ –≤—Å—ñ—Ö —é–∑–µ—Ä–∞—Ö
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        my_score = get_user_field(user_id, "score") or 0
        return None, my_score, total_users


def unlock_badge(user_id, badge, reward=0):
    with connect() as con:
        cur = con.cursor()
        cur.execute(
            "SELECT 1 FROM badges WHERE user_id=%s AND badge=%s",
            (user_id, badge),
        )
        exists = cur.fetchone()
        if not exists:
            cur.execute("""
                INSERT INTO badges (user_id, badge)
                VALUES (%s, %s) ON CONFLICT DO NOTHING
            """, (user_id, badge))
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –≤—Å—Ç–∞–≤–∫–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ—é (rowcount > 0)
            was_inserted = cur.rowcount > 0
            if was_inserted and reward:
                cur.execute(
                    "UPDATE users SET score = score + %s WHERE id = %s",
                    (reward, user_id),
                )
            return was_inserted # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ True —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±–µ–π–¥–∂ –¥—ñ–π—Å–Ω–æ –±—É–≤ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    return False

def get_user_badges(user_id):
    with connect() as con:
        cur = con.cursor()
        cur.execute("SELECT badge FROM badges WHERE user_id = %s", (user_id,))
        return [row[0] for row in cur.fetchall()]

def count_user_tasks(user_id):
    with connect() as con:
        cur = con.cursor()
        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("""
            SELECT COUNT(ct.task_id) 
            FROM completed_tasks ct JOIN tasks t ON ct.task_id = t.id
            WHERE ct.user_id = %s AND t.is_daily=FALSE
            """, (user_id,)
        )
        result = cur.fetchone()
        return result[0] if result else 0

def add_feedback(user_id, username, message):
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            INSERT INTO feedback (user_id, username, message)
            VALUES (%s, %s, %s)
        """, (user_id, username, message))
        cur.execute("UPDATE users SET feedbacks = feedbacks + 1 WHERE id = %s", (user_id,))

# -----------------------------
# Progress flags / aggregates
# -----------------------------
def update_all_tasks_completed_flag(user_id):
    with connect() as con:
        cur = con.cursor()
        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("SELECT COUNT(*) FROM tasks WHERE is_daily=FALSE")
        total_tasks = cur.fetchone()[0]
        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("""
             SELECT COUNT(ct.task_id) 
             FROM completed_tasks ct JOIN tasks t ON ct.task_id = t.id
             WHERE ct.user_id = %s AND t.is_daily=FALSE
             """, (user_id,))
        completed = cur.fetchone()[0]
        
        completed_flag = 1 if total_tasks > 0 and completed >= total_tasks else 0
        cur.execute(
            "UPDATE users SET all_tasks_completed = %s WHERE id = %s",
            (completed_flag, user_id),
        )

def update_topics_progress(user_id):
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫–ª–∞–¥–Ω–∞ —ñ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω–æ—é. –ú–æ–∂–ª–∏–≤–æ, —ó—ó –≤–∞—Ä—Ç–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ä—ñ–¥—à–µ?
    # –ê–±–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥—ñ–∫—É –≤ —Ç—Ä–∏–≥–µ—Ä–∏ –ë–î.
    with connect() as con:
        cur = con.cursor()
        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("SELECT DISTINCT topic FROM tasks WHERE is_daily=FALSE")
        all_topics = {row[0] for row in cur.fetchall() if row[0]}
        topics_total = len(all_topics)

        # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        cur.execute("""
            SELECT t.topic
            FROM completed_tasks c
            JOIN tasks t ON c.task_id = t.id
            WHERE c.user_id = %s AND t.is_daily = FALSE
            GROUP BY t.topic
            HAVING COUNT(DISTINCT t.id) = (SELECT COUNT(*) FROM tasks t2 WHERE t2.topic = t.topic AND t2.is_daily = FALSE)
        """, (user_id,))
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–ø–∏—Ç –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –∑–æ–≤—Å—ñ–º –∫–æ—Ä–µ–∫—Ç–Ω–∏–º, —è–∫—â–æ –Ω–∞–º —Ç—Ä–µ–±–∞ —Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–µ–º–∏,
        # –¥–µ *—Ö–æ—á–∞ –± –æ–¥–Ω–∞* –∑–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞. –£—Ç–æ—á–Ω–∏ –ª–æ–≥—ñ–∫—É.
        # –û—Å—å –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è "—Ö–æ—á–∞ –± –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞":
        cur.execute("""
             SELECT DISTINCT t.topic
             FROM completed_tasks c
             JOIN tasks t ON c.task_id = t.id
             WHERE c.user_id = %s AND t.is_daily = FALSE AND t.topic IS NOT NULL
         """, (user_id,)) # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=FALSE
        completed_topics = {row[0] for row in cur.fetchall() if row[0]}
        # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —Ä–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —Ç–µ–º–∏, —è–∫—ñ —î –≤ all_topics
        actual_completed_topics = completed_topics.intersection(all_topics)
        topics_completed = len(actual_completed_topics)


        cur.execute("""
            UPDATE users SET topics_total = %s, topics_completed = %s
            WHERE id = %s
        """, (topics_total, topics_completed, user_id))


def mark_task_completed(user_id, task_id):
    was_inserted = False
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            INSERT INTO completed_tasks (user_id, task_id)
            VALUES (%s, %s)
            ON CONFLICT DO NOTHING
        """, (user_id, task_id))
        was_inserted = cur.rowcount > 0 # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–∏–π (—á–∏ —Ü–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä)

    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–≥—Ä–µ–≥–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –±—É–ª–æ –ø–µ—Ä—à–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    if was_inserted:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —Ü–µ –±—É–ª–∞ –∑–≤–∏—á–∞–π–Ω–∞ –∑–∞–¥–∞—á–∞, –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –∞–≥—Ä–µ–≥–∞—Ç—ñ–≤
        task = get_task_by_id(task_id)
        if task and not task.get('is_daily'): # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 'is_daily' —Ç–µ–ø–µ—Ä False
             try:
                 update_all_tasks_completed_flag(user_id)
                 update_topics_progress(user_id)
             except Exception as e:
                 logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞–≥—Ä–µ–≥–∞—Ç—ñ–≤ –¥–ª—è user {user_id} –ø—ñ—Å–ª—è task {task_id}: {e}")

    return was_inserted # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å, —á–∏ –±—É–ª–∞ –∑–∞–¥–∞—á–∞ –≤—ñ–¥–º—ñ—á–µ–Ω–∞ –≤–ø–µ—Ä—à–µ


def get_available_levels_for_topic(topic, exclude_level=None):
    # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily=0 -> is_daily=False
    tasks = get_all_tasks_by_topic(topic, is_daily=False) # –®—É–∫–∞—î–º–æ —Ä—ñ–≤–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Å–µ—Ä–µ–¥ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–¥–∞—á
    available = {t['level'] for t in tasks if t.get('level')} # –î–æ–¥–∞–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None
    if exclude_level:
        available.discard(exclude_level) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ discard –∑–∞–º—ñ—Å—Ç—å remove
    return sorted(list(available))

def get_all_topics_by_category(category, is_daily=False): # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: 0 -> False
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT DISTINCT topic FROM tasks
            WHERE category=%s AND is_daily=%s AND topic IS NOT NULL AND topic != ''
        """, (category, is_daily)) # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–±—Ä–∞–Ω–æ int()
        return [row[0] for row in cur.fetchall()]

def get_completed_task_ids(user_id, topic=None, level=None):
    with connect() as con:
        cur = con.cursor()
        query = "SELECT c.task_id FROM completed_tasks c JOIN tasks t ON t.id = c.task_id WHERE c.user_id = %s"
        params = [user_id]
        
        # –î–æ–¥–∞—î–º–æ is_daily=0, —è–∫—â–æ —à—É–∫–∞—î–º–æ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
        is_daily_check_needed = True 

        if topic:
            query += " AND t.topic = %s"
            params.append(topic)
        if level:
            query += " AND t.level = %s"
            params.append(level)
            
        # –Ø–∫—â–æ –º–∏ –Ω–µ —à—É–∫–∞—î–º–æ —â–æ–¥–µ–Ω–Ω—ñ, –¥–æ–¥–∞—î–º–æ is_daily=0
        # (–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –Ω–µ –∑–ª–∞–º–∞—î —Ü–µ –ª–æ–≥—ñ–∫—É —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á)
        # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –∫–æ–ª–∏ topic/level –Ω–µ –∑–∞–¥–∞–Ω—ñ, –º–∏ —Ö–æ—á–µ–º–æ –í–°–Ü id, —Ç–æ–º—É is_daily –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
        # if topic or level: 
        #    query += " AND t.is_daily = FALSE" # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û (–∞–ª–µ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ)
            
        cur.execute(query, tuple(params))
        return {row[0] for row in cur.fetchall()}

# -----------------------------
# Streaks (days) and per-topic
# -----------------------------
def update_streak_and_reward(user_id):
    today = date.today()
    new_streak = 0
    reward = 0
    current_streak = 0
    
    with connect() as con:
        cur = con.cursor()
        cur.execute("SELECT last_activity, streak_days FROM users WHERE id = %s FOR UPDATE", (user_id,)) # –ë–ª–æ–∫—É—î–º–æ —Ä—è–¥–æ–∫
        row = cur.fetchone()
        last_activity, streak_days = (row if row else (None, 0))
        current_streak = streak_days or 0

        if last_activity == today:
            return current_streak, 0 # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –±—É–ª–∞, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

        if last_activity == (today - timedelta(days=1)):
            new_streak = current_streak + 1
        else:
            new_streak = 1 # –°—Ç—Ä—ñ–∫ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ

        cur.execute(
            "UPDATE users SET last_activity=%s, streak_days=%s WHERE id=%s",
            (today, new_streak, user_id),
        )

        reward_map = {3: 5, 7: 10, 14: 20, 30: 50}
        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –°–¨–û–ì–û–î–ù–Ü –¥–æ—Å—è–≥–ª–∏ –ø–æ–∑–Ω–∞—á–∫–∏
        if new_streak in reward_map: 
             # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ —Ü—é –ø–æ–∑–Ω–∞—á–∫—É –≤–∂–µ –Ω–µ –±—É–ª–∞ –≤–∏–¥–∞–Ω–∞ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è?)
             # –ü–æ–∫–∏ —â–æ –≤–∏–¥–∞—î–º–æ –∑–∞–≤–∂–¥–∏ –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ
            reward = reward_map[new_streak]
            if reward > 0:
                cur.execute(
                    "UPDATE users SET score = score + %s WHERE id=%s",
                    (reward, user_id),
                )
                logger.info(f"User {user_id} –¥–æ—Å—è–≥ —Å—Ç—Ä—ñ–∫—É {new_streak} –¥–Ω—ñ–≤! –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ +{reward} –±–∞–ª—ñ–≤.")

    return new_streak, reward

def get_topic_streak(user_id: int, topic: str) -> int:
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT streak FROM user_topic_streaks
            WHERE user_id=%s AND topic=%s
        """, (user_id, topic))
        row = cur.fetchone()
        return row[0] if row else 0

def set_topic_streak(user_id: int, topic: str, value: int):
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            INSERT INTO user_topic_streaks (user_id, topic, streak)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id, topic) DO UPDATE SET streak=EXCLUDED.streak
        """, (user_id, topic, value))

def inc_topic_streak(user_id: int, topic: str) -> int:
    current = get_topic_streak(user_id, topic)
    new_val = current + 1
    set_topic_streak(user_id, topic, new_val)
    return new_val

def reset_topic_streak(user_id: int, topic: str):
    set_topic_streak(user_id, topic, 0)

def has_topic_streak_award(user_id: int, topic: str, milestone: int) -> bool:
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT 1 FROM user_topic_streak_awards
            WHERE user_id=%s AND topic=%s AND milestone=%s
        """, (user_id, topic, milestone))
        return bool(cur.fetchone())

def mark_topic_streak_award(user_id: int, topic: str, milestone: int):
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            INSERT INTO user_topic_streak_awards (user_id, topic, milestone)
            VALUES (%s, %s, %s)
            ON CONFLICT DO NOTHING
        """, (user_id, topic, milestone))

# -----------------------------
# Aggregates for fast progress
# -----------------------------
def get_progress_aggregates(user_id: int):
    totals = {}
    done = {}
    try:
        with connect() as con:
            cur = con.cursor()
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–∞—Ö/—Ä—ñ–≤–Ω—è—Ö
            cur.execute("""
                SELECT topic, level, COUNT(*)
                FROM tasks
                WHERE is_daily = FALSE AND topic IS NOT NULL AND level IS NOT NULL AND topic != '' AND level != ''
                GROUP BY topic, level
            """) # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily = 0 -> is_daily = FALSE
            totals = {(t, l): n for (t, l, n) in cur.fetchall()}

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–¥–∞—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø–æ —Ç–µ–º–∞—Ö/—Ä—ñ–≤–Ω—è—Ö
            cur.execute("""
                SELECT t.topic, t.level, COUNT(c.task_id)
                FROM completed_tasks c
                JOIN tasks t ON t.id = c.task_id
                WHERE c.user_id = %s AND t.is_daily = FALSE 
                      AND t.topic IS NOT NULL AND t.level IS NOT NULL AND t.topic != '' AND t.level != ''
                GROUP BY t.topic, t.level
            """, (user_id,)) # üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–û: is_daily = 0 -> is_daily = FALSE
            done = {(t, l): n for (t, l, n) in cur.fetchall()}
            
    except Exception as e:
       logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–≥—Ä–µ–≥–∞—Ç—ñ–≤ –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è user {user_id}: {e}", exc_info=True)
       # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
       return {}, {}
       
    return totals, done

def get_users_for_reengagement(days_ago: int):
    target_date = date.today() - timedelta(days=days_ago)
    with connect() as con:
        cur = con.cursor()
        cur.execute(
            "SELECT id FROM users WHERE last_activity = %s",
            (target_date,)
        )
        return cur.fetchall()

def get_all_users_for_export():
    with connect() as con:
        cur = con.cursor()
        cur.execute("""
            SELECT id, display_name, username, score, city, phone_number, last_activity
            FROM users
            ORDER BY score DESC, id
        """)
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ –≤ —Ä—è–¥–∫–∏ –¥–ª—è CSV
        results = []
        for row in cur.fetchall():
            row_list = list(row)
            if isinstance(row_list[-1], date): # –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç - –¥–∞—Ç–∞
                row_list[-1] = row_list[-1].isoformat() # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ YYYY-MM-DD
            results.append(tuple(row_list))
        return results
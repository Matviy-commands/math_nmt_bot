from handlers.utils import (
    build_admin_menu,
    build_cancel_keyboard,
    build_main_menu,
    build_tasks_pagination_keyboard,
    build_topics_keyboard,
    build_tasks_pagination_inline_keyboard,
    build_feedback_pagination_inline_keyboard
)
from db import *
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from handlers.state import feedback_state

add_task_state = {}
admin_menu_state = {}
edit_task_state = {}
delete_task_state = {}

LEVELS = ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"]
admin_ids = [1070282751]
TASKS_PER_PAGE = 5
FEEDBACKS_PER_PAGE = 5

async def admin_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if await handle_admin_menu(update, context, user_id, text):
        return
    if await handle_add_task(update, context, user_id, text):
        return
    if await handle_delete_task(update, context, user_id, text):
        return
    if await handle_edit_task(update, context, user_id, text):
        return

async def addtask_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É"
    await handle_admin_menu(update, context, user_id, text)

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, text):
    if user_id in feedback_state and feedback_state[user_id].get("step") == "pagination":
        if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            feedback_state.pop(user_id, None)
            await update.message.reply_text(
                "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.",
                reply_markup=build_admin_menu()
            )
            return True
    # --- –ü–µ—Ä–µ–≥–ª—è–¥ –∑–≤–µ—Ä–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
    if text == "üí¨ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" and user_id in admin_menu_state:
        feedbacks = get_all_feedback()
        if not feedbacks:
            await update.message.reply_text("–ù–µ–º–∞—î –∑–≤–µ—Ä–Ω–µ–Ω—å.", reply_markup=build_admin_menu())
            return True
        feedback_state[user_id] = {"page": 0, "step": "pagination"}
        msg, total = show_feedback_page_msg(feedbacks, 0)
        has_prev = False
        has_next = FEEDBACKS_PER_PAGE < total
        await update.message.reply_text(
            msg,
            reply_markup=build_feedback_pagination_inline_keyboard(0, has_prev, has_next)
        )
        return True


    # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω–∫—É
    if text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É" and user_id in admin_menu_state:
        add_task_state[user_id] = {"step": "topic"}
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –∑–∞–¥–∞—á—ñ:",
            reply_markup=build_cancel_keyboard()
        )
        return True

    if text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É" and user_id in admin_menu_state:
        delete_task_state[user_id] = {"step": "ask_id"}
        await update.message.reply_text(
            "–í–≤–µ–¥–∏ ID –∑–∞–¥–∞—á—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=build_cancel_keyboard()
        )
        return True

    if text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É" and user_id in admin_menu_state:
        edit_task_state[user_id] = {"step": "ask_id"}
        await update.message.reply_text(
            "–í–≤–µ–¥–∏ ID –∑–∞–¥–∞—á—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
            reply_markup=build_cancel_keyboard()
        )
        return True

    if text == "üîê –ê–¥–º—ñ–Ω–∫–∞" and user_id in admin_ids:
        admin_menu_state[user_id] = True
        await update.message.reply_text(
            "–í—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=build_admin_menu()
        )
        return True

    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥" and user_id in admin_menu_state:
        if admin_menu_state[user_id] == True:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –∫–æ—Ä–µ–Ω—ñ –∞–¥–º—ñ–Ω-–º–µ–Ω—é ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            admin_menu_state.pop(user_id, None)
            await update.message.reply_text(
                "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
                reply_markup=build_main_menu(user_id)
            )
            return True
        else:
            # –Ø–∫—â–æ –≤ –ø—ñ–¥–º–µ–Ω—é ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
            admin_menu_state[user_id] = True
            await update.message.reply_text(
                "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.",
                reply_markup=build_admin_menu()
            )
            return True

    # --- –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≤–∏–±—ñ—Ä —Ç–µ–º–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–¥–∞—á ---
    if text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–¥–∞—á—ñ" and user_id in admin_menu_state:
        admin_menu_state[user_id] = {"step": "choose_topic"}
        topics = get_all_topics()
        if not topics:
            await update.message.reply_text("–£ –±–∞–∑—ñ —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏.", reply_markup=build_admin_menu())
            return True
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–¥–∞—á:",
            reply_markup=build_topics_keyboard(topics + ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
        )
        return True

    # --- –ö—Ä–æ–∫ 2: –û–±—Ä–∞–Ω–æ —Ç–µ–º—É ‚Äî —Å—Ç–∞—Ä—Ç—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é ---
    if user_id in admin_menu_state and isinstance(admin_menu_state[user_id], dict):
        state = admin_menu_state[user_id]
        topics = get_all_topics()
        if state.get("step") == "choose_topic" and text in topics:
            state["topic"] = text
            state["page"] = 0
            state["step"] = "pagination"
            print(f"[DEBUG] –í–∏–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {text}, state: {state}")
            await show_tasks_page(update, user_id, state["topic"], 0)
            return True



        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≤–∏–±—ñ—Ä –¥—ñ—ó –∞–¥–º—ñ–Ω–∫–∏
        if state.get("step") == "choose_topic" and text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            admin_menu_state[user_id] = True
            await update.message.reply_text(
                "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=build_admin_menu()
            )
            return True

        # --- –õ–∏—Å—Ç–∞–Ω–Ω—è –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥ –≤–∂–µ –ø–æ –æ–±—Ä–∞–Ω—ñ–π —Ç–µ–º—ñ ---
        if state.get("step") == "pagination":
            topic = state["topic"]
            page = state.get("page", 0)
            if text == "‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è":
                state["page"] = max(0, page - 1)
                await show_tasks_page(update, user_id, topic, state["page"])
                return True
            if text == "–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è":
                state["page"] = page + 1
                await show_tasks_page(update, user_id, topic, state["page"])
                return True

    return False

def show_tasks_page_msg(topic, page):
    all_tasks = get_all_tasks_by_topic(topic)
    total = len(all_tasks)
    start = page * TASKS_PER_PAGE
    end = start + TASKS_PER_PAGE
    tasks_on_page = all_tasks[start:end]
    msg = f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑ —Ç–µ–º–∏ ¬´{topic}¬ª (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{(total-1)//TASKS_PER_PAGE+1}):\n\n"
    for t in tasks_on_page:
        msg += f"ID: {t['id']}\n–¢–µ–º–∞: {t['topic']}\n–†—ñ–≤–µ–Ω—å: {t['level']}\n–ü–∏—Ç–∞–Ω–Ω—è: {t['question'][:30]}...\n\n"
    return msg, len(all_tasks)

def show_feedback_page_msg(feedbacks, page):
    total = len(feedbacks)
    start = page * FEEDBACKS_PER_PAGE
    end = start + FEEDBACKS_PER_PAGE
    page_feedbacks = feedbacks[start:end]
    msg = f"–°–ø–∏—Å–æ–∫ –∑–≤–µ—Ä–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{(total-1)//FEEDBACKS_PER_PAGE+1}):\n\n"
    for fb in page_feedbacks:
        # fb: (id, user_id, username, date, text)
        msg += f"ID: {fb[0]}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{fb[2]} (id:{fb[1]})\n{fb[4]}\n{fb[3]}\n\n"
    return msg, total

from telegram import ReplyKeyboardRemove

async def show_tasks_page(update, user_id, topic, page):
    msg, total = show_tasks_page_msg(topic, page)
    has_prev = page > 0
    has_next = (page + 1) * TASKS_PER_PAGE < total
    print(f"[DEBUG] show_tasks_page: topic={topic}, page={page}, has_prev={has_prev}, has_next={has_next}, total={total}")
    await update.message.reply_text(
        msg,
        reply_markup=build_tasks_pagination_inline_keyboard(page, has_prev, has_next)
    )
    # –í—ñ–¥–ø—Ä–∞–≤ reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∑–∞–¥–∞—á–∞–º–∏:",
        reply_markup=build_tasks_pagination_keyboard(page, has_prev, has_next)
    )





async def handle_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, text):
    if user_id not in add_task_state:
        return False
    state = add_task_state[user_id]
    data = state.get("data", {})
    if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        del add_task_state[user_id]
        if user_id in admin_menu_state:
            await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=build_admin_menu())
        else:
            await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=build_main_menu(user_id))
        return True
    if state["step"] == "topic":
        data["topic"] = text
        state["step"] = "level"
        state["data"] = data
        await update.message.reply_text("üü° –í–≤–µ–¥–∏ —Ä—ñ–≤–µ–Ω—å –∑–∞–¥–∞—á—ñ (–ª–µ–≥–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∞–∂–∫–∏–π):", reply_markup=build_cancel_keyboard())
        return True
    elif state["step"] == "level":
        if text not in LEVELS:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å. –í–≤–µ–¥–∏: –ª–µ–≥–∫–∏–π / —Å–µ—Ä–µ–¥–Ω—ñ–π / –≤–∞–∂–∫–∏–π", reply_markup=build_cancel_keyboard())
            return True
        data["level"] = text
        state["step"] = "question"
        state["data"] = data
        await update.message.reply_text("üü¢ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ:", reply_markup=build_cancel_keyboard())
        return True
    elif state["step"] == "question":
        data["question"] = text
        state["step"] = "answer"
        state["data"] = data
        await update.message.reply_text("üî∑ –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2, -2):", reply_markup=build_cancel_keyboard())
        return True
    elif state["step"] == "answer":
        data["answer"] = [a.strip() for a in text.split(",")]
        state["step"] = "explanation"
        state["data"] = data
        await update.message.reply_text("üìò –í–≤–µ–¥–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ:", reply_markup=build_cancel_keyboard())
        return True
    elif state["step"] == "explanation":
        data["explanation"] = text
        add_task(data)
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=build_admin_menu() if user_id in admin_menu_state else build_main_menu(user_id))
        del add_task_state[user_id]
        return True
    return False

async def handle_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, text):
    if user_id not in delete_task_state:
        return False
    if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        del delete_task_state[user_id]
        await update.message.reply_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=build_admin_menu())
        return True
    state = delete_task_state[user_id]
    if state["step"] == "ask_id":
        try:
            task_id = int(text)
            task = get_task_by_id(task_id)
            if not task:
                await update.message.reply_text("–ó–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
                return True
            delete_task(task_id)
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –≤–∏–¥–∞–ª–µ–Ω–∞.", reply_markup=build_admin_menu())
            del delete_task_state[user_id]
            return True
        except Exception:
            await update.message.reply_text("ID –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
            return True
    return False

async def handle_edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, text):
    if user_id not in edit_task_state:
        return False
    state = edit_task_state[user_id]
    if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        del edit_task_state[user_id]
        await update.message.reply_text("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=build_admin_menu())
        return True
    if state["step"] == "ask_id":
        try:
            task_id = int(text)
            task = get_task_by_id(task_id)
            if not task:
                await update.message.reply_text("–ó–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
                return True
            state["task_id"] = task_id
            state["step"] = "edit_question"
            await update.message.reply_text(
                f"–ü–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è: {task['question']}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:",
                reply_markup=build_cancel_keyboard()
            )
            return True
        except Exception:
            await update.message.reply_text("ID –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
            return True
    elif state["step"] == "edit_question":
        task_id = state["task_id"]
        task = get_task_by_id(task_id)
        if text.strip():
            update_task_field(task_id, "question", text.strip())
        state["step"] = "edit_level"
        await update.message.reply_text(
            f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {task['level']}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å (–ª–µ–≥–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∞–∂–∫–∏–π) –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:",
            reply_markup=build_cancel_keyboard()
        )
        return True
    elif state["step"] == "edit_level":
        task_id = state["task_id"]
        task = get_task_by_id(task_id)
        level = text.strip()
        if level and level not in LEVELS:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å. –ú–æ–∂–ª–∏–≤—ñ: –ª–µ–≥–∫–∏–π / —Å–µ—Ä–µ–¥–Ω—ñ–π / –≤–∞–∂–∫–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
            return True
        if level:
            update_task_field(task_id, "level", level)
        state["step"] = "edit_answer"
        ans_str = ', '.join(task['answer'])
        await update.message.reply_text(
            f"–ü–æ—Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {ans_str}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:",
            reply_markup=build_cancel_keyboard()
        )
        return True
    elif state["step"] == "edit_answer":
        task_id = state["task_id"]
        task = get_task_by_id(task_id)
        if text.strip():
            ans_list = [a.strip() for a in text.split(",")]
            update_task_field(task_id, "answer", json.dumps(ans_list))
        state["step"] = "edit_explanation"
        await update.message.reply_text(
            f"–ü–æ—Ç–æ—á–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è: {task['explanation']}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:",
            reply_markup=build_cancel_keyboard()
        )
        return True
    elif state["step"] == "edit_explanation":
        task_id = state["task_id"]
        if text.strip():
            update_task_field(task_id, "explanation", text.strip())
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á—É –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=build_admin_menu())
        del edit_task_state[user_id]
        return True
    return False

async def handle_task_pagination_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('[DEBUG] callback received!')
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in admin_menu_state or not isinstance(admin_menu_state[user_id], dict):
        await query.answer()
        return

    state = admin_menu_state[user_id]
    topic = state["topic"]
    page = state["page"]

    if query.data.startswith("prev_"):
        page = max(0, page - 1)
        state["page"] = page
    elif query.data.startswith("next_"):
        page = page + 1
        state["page"] = page
    elif query.data == "back":
        admin_menu_state[user_id] = True
        await query.edit_message_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=build_admin_menu())
        await query.answer()
        return

    msg, total = show_tasks_page_msg(topic, page)
    has_prev = page > 0
    has_next = (page + 1) * TASKS_PER_PAGE < total

    await query.edit_message_text(
        msg,
        reply_markup=build_tasks_pagination_inline_keyboard(page, has_prev, has_next)
    )
    await query.answer()

async def handle_feedback_pagination_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    print(f"[DEBUG] Feedback callback: {query.data}, user_id: {user_id}")

    if user_id not in feedback_state or feedback_state[user_id].get("step") != "pagination":
        await query.answer()
        print(f"[DEBUG] Feedback callback IGNORED (state: {feedback_state.get(user_id)})")
        return


    feedbacks = get_all_feedback()
    state = feedback_state[user_id]
    page = state["page"]

    if query.data.startswith("feedback_prev_"):
        page = max(0, page - 1)
        state["page"] = page
    elif query.data.startswith("feedback_next_"):
        page = page + 1
        state["page"] = page


    msg, total = show_feedback_page_msg(feedbacks, page)
    has_prev = page > 0
    has_next = (page + 1) * FEEDBACKS_PER_PAGE < total
    await query.edit_message_text(
        msg,
        reply_markup=build_feedback_pagination_inline_keyboard(page, has_prev, has_next)
    )
    await query.answer()

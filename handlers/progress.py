import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

# Import helper functions and constants
from handlers.utils import (
    admin_ids, CATEGORIES, LEVELS,
    create_progress_bar, # Import the new progress bar function
    build_main_menu # Import build_main_menu for error handling
)
# Import badge list to display emojis
from handlers.badges import BADGES_LIST

# Import database functions
from db import (
    get_user_field, get_level_by_score,
    get_top_users, get_user_rank,
    get_all_topics_by_category, get_user_badges,
    get_progress_aggregates,
)

# --- Logging Setup ---
logger = logging.getLogger(__name__)
if not logger.hasHandlers():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# --- End Logging Setup ---


async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Displays the user's progress, score, level, streaks, and badges."""
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: Running show_progress.")

    try:
        # Send typing action for immediate feedback
        await context.bot.send_chat_action(chat_id=user_id, action="typing")
        context.user_data['user_last_menu'] = "progress" # Track last menu for 'Back' button

        logger.info(f"User {user_id}: Fetching user data for progress...")
        # Fetch user data safely using .get() or default values
        score = get_user_field(user_id, "score") or 0
        level = get_level_by_score(score) # Handles None score internally now
        streak = get_user_field(user_id, "streak_days") or 0
        user_badges = get_user_badges(user_id) # Fetch badges list
        opened_badges_count = len(user_badges)

        # Fetch progress aggregates
        totals, done = get_progress_aggregates(user_id)
        logger.info(f"User {user_id}: Data fetched. Formatting message...")

        # --- Build Progress Message ---
        msg = (
            "üìä <b>–ú—ñ–π –ü—Ä–æ–≥—Ä–µ—Å —Ç–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"‚≠ê <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:</b> <code>{score}</code> –±–∞–ª—ñ–≤\n"
            f"üèÖ <b>–¢–≤—ñ–π —Ä—ñ–≤–µ–Ω—å:</b> {level}\n\n"
            f"üî• <b>–°–µ—Ä—ñ—è –¥–Ω—ñ–≤ –ø—ñ–¥—Ä—è–¥:</b> <code>{streak}</code>\n"
            f"üèÜ <b>–í—ñ–¥–∫—Ä–∏—Ç–æ –±–µ–π–¥–∂—ñ–≤:</b> <code>{opened_badges_count}</code>\n\n"
            "üìö <b>–ü—Ä–æ–≥—Ä–µ—Å –ø–æ –¢–µ–º–∞—Ö:</b>\n"
            "--------------------\n"
        )

        has_progress_data = False
        # Iterate through categories to display progress
        for category in CATEGORIES:
            category_msg = f"\nüìÅ <b>{category}:</b>\n"
            category_has_topics = False
            topics = get_all_topics_by_category(category) # Get topics for this category
            topics.sort() # Sort topics alphabetically

            for topic in topics:
                topic_lines = []
                topic_has_levels = False
                # Filter and sort levels that actually have tasks in totals
                sorted_levels = sorted([lvl for lvl in LEVELS if totals.get((topic, lvl), 0) > 0])

                for lvl in sorted_levels:
                    n_total = totals.get((topic, lvl), 0)
                    n_done = done.get((topic, lvl), 0)

                    # Use the progress bar function
                    progress_bar_str = create_progress_bar(n_done, n_total, length=8) # Bar length 8
                    level_emoji = "üü¢" if lvl == "–ª–µ–≥–∫–∏–π" else "üü°" if lvl == "—Å–µ—Ä–µ–¥–Ω—ñ–π" else "üî¥" if lvl == "–≤–∞–∂–∫–∏–π" else "‚ùì"
                    topic_lines.append(f"   {level_emoji} {lvl.capitalize()}: {progress_bar_str}")
                    topic_has_levels = True
                    has_progress_data = True # Mark that we have some progress to show

                if topic_has_levels:
                    # Add topic name before its levels
                    category_msg += f"  üìñ <i>{topic}:</i>\n" + "\n".join(topic_lines) + "\n"
                    category_has_topics = True

            if category_has_topics:
                msg += category_msg
            else:
                 # If category has no topics with tasks (or no progress yet)
                 msg += f"\nüìÅ <b>{category}:</b>\n  <i>(–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø—Ä–æ–≥—Ä–µ—Å—É)</i>\n"

        # Handle cases where there's no progress data at all
        if not has_progress_data and not any(get_all_topics_by_category(cat) for cat in CATEGORIES):
             msg += "\n<i>–†–æ–∑–ø–æ—á–Ω–∏ —Ä–æ–∑–≤'—è–∑—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å —Ç—É—Ç!</i>\n"
        elif not has_progress_data:
             msg += "\n<i>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø—Ä–æ–≥—Ä–µ—Å—É –ø–æ –∂–æ–¥–Ω—ñ–π —Ç–µ–º—ñ. –í–ø–µ—Ä–µ–¥ –¥–æ –∑–Ω–∞–Ω—å!</i> üí™\n"

        # --- Display Unlocked Badges ---
        msg += "\n--------------------\n"
        msg += "üèÖ <b>–¢–≤–æ—ó –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (–ë–µ–π–¥–∂—ñ):</b>\n"
        if user_badges:
            badge_lines = []
            # Sort badges maybe?
            # user_badges.sort()
            for badge_name in user_badges:
                 badge_emoji = "üèÜ" # Default emoji
                 # Find emoji from BADGES_LIST
                 for b_name, b_emoji, *_ in BADGES_LIST:
                     if b_name == badge_name:
                         badge_emoji = b_emoji
                         break
                 badge_lines.append(f"  {badge_emoji} {badge_name}")
            msg += "\n".join(badge_lines) + "\n"
        else:
            msg += "<i>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –±–µ–π–¥–∂—ñ–≤. –í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ–± —ó—Ö –æ—Ç—Ä–∏–º–∞—Ç–∏!</i>\n"
        # --- End Badges Display ---

        # Define keyboard for the progress screen
        keyboard = [
            [KeyboardButton("üõí –ë–æ–Ω—É—Å–∏ / –ë–µ–π–¥–∂—ñ")],
            [KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")] # Back to main menu
        ]

        logger.info(f"User {user_id}: Progress message formatted. Sending...")
        await update.message.reply_text(
            msg,
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        logger.info(f"User {user_id}: Progress message sent successfully.")

    except Exception as e:
        logger.error(f"Error in show_progress for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–û–π, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ–≥—Ä–µ—Å—É. üò• –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=build_main_menu(user_id) # Go back to main menu on error
        )


async def show_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Displays the top users leaderboard and the current user's rank."""
    user_id = update.effective_user.id
    logger.info(f"User {user_id}: Running show_rating.")

    try:
        display_name = get_user_field(user_id, "display_name")

        # --- Initiate Registration if Name is Missing ---
        if not display_name:
            logger.info(f"User {user_id}: No display name found. Initiating registration.")
            context.user_data['registration_state'] = {"step": "name"}
            await update.message.reply_text(
                "üëã –°—Ö–æ–∂–µ, —Ç–∏ —Ç—É—Ç –≤–ø–µ—Ä—à–µ! –©–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –¥–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ—Å—å.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–º º—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (2-20 —Å–∏–º–≤–æ–ª—ñ–≤):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True, one_time_keyboard=True)
            )
            return
        # --- End Registration Check ---

        # Send typing action
        await context.bot.send_chat_action(chat_id=user_id, action="typing")
        context.user_data['user_last_menu'] = "rating" # Track for 'Back' button

        logger.info(f"User {user_id}: Fetching rating data...")
        top_users = get_top_users(10) # Fetch top 10 users with score > 0
        rank, my_score, total_users = get_user_rank(user_id) # Fetch user's rank among those with score > 0
        logger.info(f"User {user_id}: Rating data fetched. Formatting message...")

        # --- Build Rating Message ---
        msg = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –¢–æ–ø-10 –ì—Ä–∞–≤—Ü—ñ–≤</b> üèÜ\n\n"

        if not top_users:
            msg += "<i>–ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–≤ –±–∞–ª—ñ–≤. –ë—É–¥—å –ø–µ—Ä—à–∏–º!</i> üòâ\n"
        else:
            for idx, (uid, u_score) in enumerate(top_users, start=1):
                # Fetch display name safely
                dn = get_user_field(uid, "display_name") or f"–ì—Ä–∞–≤–µ—Ü—å_{uid%1000}"
                medal = ""
                if idx == 1: medal = "ü•á"
                elif idx == 2: medal = "ü•à"
                elif idx == 3: medal = "ü•â"
                else: medal = f"{idx}." # Use number for others

                line = f"{medal} {dn} ‚Äî <code>{u_score}</code> –±–∞–ª—ñ–≤"
                if uid == user_id:
                     line += " <b>(–¢–∏!)</b> ‚ú®"
                msg += line + "\n"

        msg += "\n--------------------\n" # Separator

        # Display user's rank info
        if rank: # User is in the ranked list (score > 0)
            msg += f"üë§ <b>–¢–≤–æ—î –º—ñ—Å—Ü–µ:</b> {rank} –∑ {total_users} (—Å–µ—Ä–µ–¥ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –±–∞–ª–∞–º–∏)\n"
            msg += f"‚≠ê <b>–¢–≤–æ—ó –±–∞–ª–∏:</b> <code>{my_score}</code>"
        else: # User has 0 score or an error occurred
            msg += f"üë§ <b>–¢–≤–æ—î –º—ñ—Å—Ü–µ:</b> –ü–æ–∫–∏ —â–æ –ø–æ–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º (<code>{my_score}</code> –±–∞–ª—ñ–≤)\n"
            msg += "<i>–í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ —É —Ç–æ–ø!</i> üí™"
        # --- End Rating Message ---

        # Define keyboard for the rating screen
        keyboard = [
            [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É")],
            [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")] # Back to progress screen
        ]

        logger.info(f"User {user_id}: Rating message formatted. Sending...")
        await update.message.reply_text(
            msg,
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        logger.info(f"User {user_id}: Rating message sent successfully.")

    except Exception as e:
        logger.error(f"Error in show_rating for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–û–π, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É. üò• –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=build_main_menu(user_id) # Go back to main menu on error
        )
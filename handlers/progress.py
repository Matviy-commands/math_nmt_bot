from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from handlers.state import change_name_state
from handlers.utils import admin_ids, CATEGORIES, LEVELS 

from db import (
    get_user_field, get_level_by_score,
    get_all_topics, get_all_tasks_by_topic,
    get_user_completed_count, get_top_users, get_user_rank,
    get_all_topics_by_category
)


async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    from handlers.state import user_last_menu
    user_last_menu[user_id] = "progress"
    score = get_user_field(user_id, "score") or 0
    level = get_level_by_score(score)
    topics = get_all_topics()
    msg = f"üìä <b>–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —ñ –ø—Ä–æ–≥—Ä–µ—Å</b>\n\n"
    msg += f"‚Ä¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤:</b> <code>{score}</code>\n"
    msg += f"‚Ä¢ <b>–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å:</b> {level}\n\n"

    msg += "<b>–ü—Ä–æ–≥—Ä–µ—Å –ø–æ —Ç–µ–º–∞—Ö:</b>\n"
    for category in CATEGORIES:
        msg += f"\n<b>{category}:</b>\n"
        topics = get_all_topics_by_category(category)
        for topic in topics:
            for lvl in LEVELS:
                tasks = get_all_tasks_by_topic(topic)
                n_total = len([t for t in tasks if t['level'] == lvl])
                n_done = get_user_completed_count(user_id, topic, lvl)
                if n_total > 0:
                    percent = int(n_done / n_total * 100)
                    msg += f"  ‚Äî {topic} ({lvl}): {n_done}/{n_total} ({percent}%)\n"

    msg += "\n<b>–í—ñ–¥–∫—Ä–∏—Ç—ñ –±–µ–π–¥–∂—ñ:</b> üîì (–Ω–µ–∑–∞–±–∞—Ä–æ–º)\n"

    keyboard = [
        [KeyboardButton("üõí –ë–æ–Ω—É—Å–∏ / –ë–µ–π–¥–∂—ñ")],
        [KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]

    await update.message.reply_text(
        msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def show_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    display_name = get_user_field(user_id, "display_name")
    # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–º º—è ‚Äî –ø—Ä–æ—Å–∏–º–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
    if not display_name:
        change_name_state[user_id] = True
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å —ñ–º º—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ä–µ–π—Ç–∏–Ω–≥—É (2-20 —Å–∏–º–≤–æ–ª—ñ–≤):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return
    from handlers.state import user_last_menu
    user_last_menu[user_id] = "rating"
    top_users = get_top_users(10)
    msg = "<b>üèÜ –¢–æ–ø-10 —É—á–∞—Å–Ω–∏–∫—ñ–≤:</b>\n\n"
    for idx, (uid, u_score) in enumerate(top_users, start=1):
        display_name = get_user_field(uid, "display_name") or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        username = get_user_field(uid, "username")  # –¢–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º
        medal = ""
        if idx == 1: medal = "ü•á"
        elif idx == 2: medal = "ü•à"
        elif idx == 3: medal = "ü•â"

        # –î–ª—è –∞–¥–º—ñ–Ω–∞ ‚Äî —ñ –Ω—ñ–∫, —ñ —é–∑–µ—Ä–Ω–µ–π–º
        if user_id in admin_ids:
            user_line = f"{medal} {idx}. {display_name}"
            if username:
                user_line += f" (@{username})"
            user_line += f" ‚Äî <b>{u_score}</b> –±–∞–ª—ñ–≤"
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî —Ç—ñ–ª—å–∫–∏ –Ω—ñ–∫
        else:
            user_line = f"{medal} {idx}. {display_name} ‚Äî <b>{u_score}</b> –±–∞–ª—ñ–≤"
        msg += user_line + "\n"

    rank, my_score, total_users = get_user_rank(user_id)
    if rank:
        msg += f"\n<b>–¢–≤–æ—î –º—ñ—Å—Ü–µ:</b> {rank} —ñ–∑ {total_users}, –±–∞–ª–∏: <b>{my_score}</b>"
    else:
        msg += f"\n<b>–¢–≤–æ—î –º—ñ—Å—Ü–µ:</b> ‚Äî (–Ω–µ–º–∞—î –±–∞–ª—ñ–≤)"

    keyboard = [
        [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text(
        msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

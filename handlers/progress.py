from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from db import (
    get_user_field, get_level_by_score,
    get_all_topics, get_all_tasks_by_topic,
    get_user_completed_count, get_top_users, get_user_rank
)

LEVELS = ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"]

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    from handlers.state import user_last_menu
    user_last_menu[user_id] = "progress"
    score = get_user_field(user_id, "score") or 0
    level = get_level_by_score(score)
    topics = get_all_topics()
    msg = f"üìä <b>–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —ñ –ø—Ä–æ–≥—Ä–µ—Å</b>\n\n"
    msg += f"‚Ä¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤:</b> <code>{score}</code>\n"
    msg += f"‚Ä¢ <b>–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å:</b> {level}\n\n"

    msg += "<b>–ü—Ä–æ–≥—Ä–µ—Å –ø–æ —Ç–µ–º–∞—Ö:</b>\n"
    for topic in topics:
        for lvl in LEVELS:
            tasks = get_all_tasks_by_topic(topic)
            n_total = len([t for t in tasks if t['level'] == lvl])
            n_done = get_user_completed_count(user_id, topic, lvl)
            if n_total > 0:
                percent = int(n_done / n_total * 100)
                msg += f"  ‚Äî {topic} ({lvl}): {n_done}/{n_total} ({percent}%)\n"

    msg += "\n<b>–í—ñ–¥–∫—Ä–∏—Ç—ñ –±–µ–π–¥–∂—ñ:</b> üîì (–Ω–µ–∑–∞–±–∞—Ä–æ–º)\n"

    keyboard = [
        [KeyboardButton("üõí –ë–æ–Ω—É—Å–∏ / –ë–µ–π–¥–∂—ñ")],
        [KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text(
        msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def show_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    from handlers.state import user_last_menu
    user_last_menu[user_id] = "rating"
    top_users = get_top_users(10)
    msg = "<b>üèÜ –¢–æ–ø-10 —É—á–∞—Å–Ω–∏–∫—ñ–≤:</b>\n\n"
    for idx, (uid, u_score) in enumerate(top_users, start=1):
        try:
            user = await context.bot.get_chat(uid)
            uname = "@" + user.username if user.username else f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid}"
        except Exception:
            uname = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid}"
        medal = ""
        if idx == 1: medal = "ü•á"
        elif idx == 2: medal = "ü•à"
        elif idx == 3: medal = "ü•â"
        msg += f"{medal} {idx}. {uname} ‚Äî <b>{u_score}</b> –±–∞–ª—ñ–≤\n"

    rank, my_score, total_users = get_user_rank(user_id)
    if rank:
        msg += f"\n<b>–¢–≤–æ—î –º—ñ—Å—Ü–µ:</b> {rank} —ñ–∑ {total_users}, –±–∞–ª–∏: <b>{my_score}</b>"
    else:
        msg += f"\n<b>–¢–≤–æ—î –º—ñ—Å—Ü–µ:</b> ‚Äî (–Ω–µ–º–∞—î –±–∞–ª—ñ–≤)"

    keyboard = [
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text(
        msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

admin_ids = [1070282751, 981761965, 622895283, 536875267, 799115167, 816846097, 542897073, 1008277167]
CATEGORIES = ["–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä—ñ—è"]
LEVELS = ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"]

TYPE_BUTTONS = {
    "–¢–µ—Å—Ç (1 –≤—ñ–¥–ø–æ–≤—ñ–¥—å)": "single",
    "–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (—á–∞—Å—Ç–∫–æ–≤—ñ –±–∞–ª–∏)": "match",
    "–í—ñ–¥–∫—Ä–∏—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å": "open",
    "BOSS/¬´–≥—Ä–æ–±–∏–∫¬ª": "boss",
    "–õ–∞–π—Ç–æ–≤–µ (0 –±–∞–ª—ñ–≤)": "light",
}

# --------- helpers

def _grid(button_texts, cols=2, extra_rows=None):
    buttons = [KeyboardButton(t) for t in button_texts]
    rows = [buttons[i:i+cols] for i in range(0, len(buttons), cols)]
    if extra_rows:
        rows.extend([[KeyboardButton(t) for t in row] for row in extra_rows])
    return rows

def _reply(rows, placeholder=None, one_time=False):
    return ReplyKeyboardMarkup(
        rows,
        resize_keyboard=True,
        one_time_keyboard=one_time,
        input_field_placeholder=placeholder
    )

# --------- public builders

def build_type_keyboard():
    rows = _grid(list(TYPE_BUTTONS.keys()), cols=2, extra_rows=[["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]])
    return _reply(rows, placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á—ñ‚Ä¶")

def build_main_menu(user_id):
    # 1) –≤–µ–ª–∏–∫–∞ –≥–æ–ª–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–∫—Ä–µ–º–∏–º —Ä—è–¥–æ–º
    row_big = [KeyboardButton("üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É")]
    # 2) —Å—ñ—Ç–∫–∞ –∑ —Ä–µ—à—Ç–æ—é
    grid_rows = _grid(
        ["üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å", "üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞", "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫"],
        cols=2
    )
    rows = [row_big] + grid_rows
    if user_id in admin_ids:
        rows += _grid(["üîê –ê–¥–º—ñ–Ω–∫–∞"], cols=1)
    return _reply(rows, placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é‚Ä¶")

def build_admin_menu():
    # –∑–≥—Ä—É–ø—É–≤–∞–ª–∏ –ø–æ —Å–µ–Ω—Å—É —ñ –∑—Ä–æ–±–∏–ª–∏ 2-–∫–æ–ª–æ–Ω–∫–∏
    rows = _grid(
        ["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É", "‚ûï –î–æ–¥–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É",
         "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–¥–∞—á—ñ", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ",
         "üí¨ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"],
        cols=2,
        extra_rows=[["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]]
    )
    return _reply(rows, placeholder="–ê–¥–º—ñ–Ω-–¥—ñ—ó‚Ä¶")

def build_cancel_keyboard():
    return _reply([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], one_time=True)

def skip_cancel_keyboard():
    rows = _grid(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"], cols=2)
    return _reply(rows, one_time=True)

def build_tasks_pagination_keyboard(page, *_):
    rows = _grid(["‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É", "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É"], cols=2, extra_rows=[["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])
    return _reply(rows)

def build_topics_keyboard(topics):
    # 2-–∫–æ–ª–æ–Ω–∫–∏ + (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏) –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –æ—Å—Ç–∞–Ω–Ω—ñ–º —Ä—è–¥–æ–º
    has_back = topics and topics[-1] == "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    if has_back:
        topics_core = topics[:-1]
    else:
        topics_core = topics
    rows = _grid(topics_core, cols=2)
    if has_back:
        rows.append([KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")])
    return _reply(rows, placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É‚Ä¶")

def build_category_keyboard():
    rows = _grid(CATEGORIES, cols=2, extra_rows=[["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])
    return _reply(rows, placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é‚Ä¶")

def build_back_to_menu_keyboard():
    return _reply([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]])

# ---------- inline paginations

def build_tasks_pagination_inline_keyboard(page, has_prev, has_next, total_pages=None):
    """
    –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑—ñ —Å—Ç—Ä—ñ–ª–∫–∞–º–∏ —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É.
    total_pages –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–ª—è ¬´1/5¬ª.
    """
    indicator = f"‚Ä¢ {page + 1}" + (f"/{total_pages} ‚Ä¢" if total_pages else " ‚Ä¢")
    row = []
    if has_prev:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_{page}"))
    row.append(InlineKeyboardButton(indicator, callback_data="noop"))
    if has_next:
        row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_{page}"))
    return InlineKeyboardMarkup([row])

def build_feedback_pagination_inline_keyboard(page, has_prev, has_next, total_pages=None):
    indicator = f"‚Ä¢ {page + 1}" + (f"/{total_pages} ‚Ä¢" if total_pages else " ‚Ä¢")
    row = []
    if has_prev:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"feedback_prev_{page}"))
    row.append(InlineKeyboardButton(indicator, callback_data="noop"))
    if has_next:
        row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"feedback_next_{page}"))
    return InlineKeyboardMarkup([row])

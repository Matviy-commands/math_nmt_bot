from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from handlers.progress import show_progress, show_rating
from handlers.daily import handle_daily_task
from handlers.state import feedback_state, user_last_menu, solving_state
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from handlers.badges import show_badges
from db import add_feedback

from db import (
    get_all_topics,
    get_all_tasks_by_topic,
    get_user_field,
    get_random_task,
    update_user,
    all_tasks_completed,
    mark_task_completed,
    add_score,
)
from handlers.utils import build_main_menu

LEVELS = ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"]

HELP_TEXT = """
üÜò <b>–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –∑–≤'—è–∑–æ–∫</b>

<b>FAQ:</b>
‚Äî <b>–©–æ —Ü–µ –∑–∞ –±–æ—Ç?</b>
–¶–µ –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑–∞–¥–∞—á –ù–ú–¢ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏.

‚Äî <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å?</b>
–û–±–∏—Ä–∞–π —Ç–µ–º—É, –≤–∏—Ä—ñ—à—É–π –∑–∞–¥–∞—á—ñ, –æ—Ç—Ä–∏–º—É–π –±–∞–ª–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å —Ç–∞ –ø—Ä–æ—Ö–æ–¥—å —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ.

‚Äî <b>–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–µ–º—É / —î –±–∞–≥</b>
–ü–∏—à–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!
"""

start_task_state = {}

def build_task_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)

def build_topic_keyboard():
    topics = get_all_topics()  # –¢–µ–º–∏ –∑ –±–∞–∑–∏
    # –Ø–∫—â–æ –Ω–µ–º–∞ –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É –∫–Ω–æ–ø–∫—É
    if not topics:
        return ReplyKeyboardMarkup([[KeyboardButton("‚ùå –ù–µ–º–∞—î —Ç–µ–º")]], resize_keyboard=True)
    buttons = [[KeyboardButton(topic)] for topic in topics]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def build_level_keyboard(levels):
    buttons = [[KeyboardButton(lvl)] for lvl in levels]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def task_entrypoint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    topics = get_all_topics()
    if not topics:
        await update.message.reply_text("‚ùå –ó–∞—Ä–∞–∑ —É –±–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏ —ñ–∑ –∑–∞–¥–∞—á–∞–º–∏.")
        return
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=build_topic_keyboard())
    start_task_state[user_id] = {"step": "topic"}

async def handle_task_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    topics = get_all_topics()

    if user_id in start_task_state:
        state = start_task_state[user_id]
        # 1. –í–∏–±—ñ—Ä —Ç–µ–º–∏
        if state["step"] == "topic" and text in topics:
            available_levels = set([t["level"] for t in get_all_tasks_by_topic(text)])
            if not available_levels:
                await update.message.reply_text("‚ùå –î–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–∞–¥–∞—á—ñ.")
                del start_task_state[user_id]
                return
            update_user(user_id, "topic", text)
            state["step"] = "level"
            buttons = [[KeyboardButton(lvl)] for lvl in LEVELS if lvl in available_levels]
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ –æ–±—Ä–∞–Ω–∞: {text} ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        # 2. –í–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è —ñ –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª—É –∑–∞–¥–∞—á
        elif state["step"] == "level" and text in LEVELS:
            topic = get_user_field(user_id, "topic")
            # ---- –æ—Ç—Ä–∏–º—É—î–º–æ –∑–∞–¥–∞—á—ñ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è, —è–∫—ñ —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ
            all_tasks = get_all_tasks_by_topic(topic)
            completed = set([
                t["id"] for t in all_tasks
                if all_tasks_completed(user_id, topic, text)
            ])
            tasks = [t for t in all_tasks if t["level"] == text and t["id"] not in completed]
            if not tasks:
                await update.message.reply_text(
                    "üéâ –í—ñ—Ç–∞—é! –¢–∏ –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ü—ñ—î—ó —Ç–µ–º–∏ —Ç–∞ —Ä—ñ–≤–Ω—è!",
                    reply_markup=build_main_menu(user_id)
                )
                del start_task_state[user_id]
                return

            # --- –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
            solving_state[user_id] = {
                "topic": topic,
                "level": text,
                "task_ids": [t["id"] for t in tasks],
                "current": 0,
            }
            await send_next_task(update, context, user_id)
            del start_task_state[user_id]
            return

async def send_next_task(update, context, user_id):
    state = solving_state[user_id]
    idx = state["current"]
    task_id = state["task_ids"][idx]
    from db import get_task_by_id
    task = get_task_by_id(task_id)
    state["current_task"] = task
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–¥–∞—á—É (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ)
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é"), KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)
    task_text = f"üìò {task['topic']} ({task['level']})\n\n{task['question']}"
    if task.get("photo"):
        await update.message.reply_photo(
            task["photo"], caption=task_text, reply_markup=kb
        )
    else:
        await update.message.reply_text(task_text, reply_markup=kb)


async def handle_task_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in solving_state:
        state = solving_state[user_id]
        task = state.get("current_task")
        if text == "‚Ü©Ô∏è –ú–µ–Ω—é":
            solving_state.pop(user_id, None)
            await update.message.reply_text(
                "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(user_id)
            )
            return
        explanation = task["explanation"].strip() if task["explanation"] else "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!"
        if text.strip() in task["answer"]:
            add_score(user_id, 10)
            msg = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –±–∞–ª—ñ–≤ üéâ"
        else:
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        msg += f"\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation}"
        await update.message.reply_text(msg)
        mark_task_completed(user_id, task["id"])
        state["current"] += 1
        # —è–∫—â–æ —î —â–µ –∑–∞–¥–∞—á—ñ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É
        if state["current"] < len(state["task_ids"]):
            await send_next_task(update, context, user_id)
        else:
            # –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ!
            await update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è ¬´{state['level']}¬ª.\n"
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton(lvl) for lvl in LEVELS if lvl != state['level']],
                      [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É")],
                      [KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )
            solving_state.pop(user_id, None)
        return


async def handle_dont_know(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in solving_state:
        state = solving_state[user_id]
        task = state.get("current_task")
        await update.message.reply_text(
            f"üìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {task['explanation'].strip() if task['explanation'] else '–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!'}"
        )
        mark_task_completed(user_id, task["id"])
        state["current"] += 1
        if state["current"] < len(state["task_ids"]):
            await send_next_task(update, context, user_id)
        else:
            await update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è ¬´{state['level']}¬ª.\n"
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton(lvl) for lvl in LEVELS if lvl != state['level']],
                      [KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É")],
                      [KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]],
                    resize_keyboard=True
                )
            )
            solving_state.pop(user_id, None)
        return



async def main_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    username = update.effective_user.username or ""

    if text in LEVELS and user_id not in start_task_state:
        # –•–æ—á–µ –ø—Ä–æ–π—Ç–∏ —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ handle_task_step
        start_task_state[user_id] = {"step": "level"}
        await handle_task_step(update, context)
        return
    if text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É":
        await task_entrypoint(update, context)
        return
    
    if text == "‚Ü©Ô∏è –ú–µ–Ω—é":
        solving_state.pop(user_id, None)  # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return


    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        last_menu = user_last_menu.get(user_id)
        if last_menu in ("badges", "rating"):
            await show_progress(update, context)
            user_last_menu[user_id] = "progress"  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
        else:
            await update.message.reply_text(
                "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(user_id)
            )
        return

    if text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        await show_progress(update, context)
        return

    if text == "üõí –ë–æ–Ω—É—Å–∏ / –ë–µ–π–¥–∂—ñ":
        await show_badges(update, context)
        return
    
    if text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        await show_rating(update, context)
        return


    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return


    # --- 1. –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ FAQ ---
    if text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫":
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            HELP_TEXT,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # --- 2. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É" ---
    if text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É":
        feedback_state[user_id] = True
        await update.message.reply_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –π–æ–≥–æ –≤ –∞–¥–º—ñ–Ω—Ü—ñ.\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return

    # --- 3. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ---
    if user_id in feedback_state:
        if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            del feedback_state[user_id]
            await update.message.reply_text(
                "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.",
                reply_markup=build_main_menu(user_id)
            )
            return
        add_feedback(user_id, username, text)
        del feedback_state[user_id]
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=build_main_menu(user_id)
        )
        return

    if text == "üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        await task_entrypoint(update, context)
        return

    if text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        await show_progress(update, context)
        return

    if user_id in start_task_state:
        await handle_task_step(update, context)
        return

    if text == "‚ùì –ù–µ –∑–Ω–∞—é" and user_id in solving_state:
        await handle_dont_know(update, context)
        return

    if user_id in solving_state:
        await handle_task_answer(update, context)
        return


    if text == "üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞":
        await handle_daily_task(update, context)
        return

    if text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫":
        # FAQ + –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤‚Äô—è–∑–∫—É
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            HELP_TEXT,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É"
    if text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É":
        await update.message.reply_text(
            "–ù–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —É Telegram: @ostapsalo",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True
            ),
            disable_web_page_preview=True
        )
        return

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return

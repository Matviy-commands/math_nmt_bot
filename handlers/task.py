from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from handlers.progress import show_progress, show_rating
from handlers.daily import handle_daily_task
from handlers.state import feedback_state, user_last_menu, solving_state, change_name_state
from handlers.badges import show_badges
from handlers.materials import MATERIALS
from handlers.scoring import calc_points


from handlers.utils import (
    build_main_menu,
    build_category_keyboard,
    build_back_to_menu_keyboard,
    CATEGORIES,               
    LEVELS,
)

from db import (
    get_all_topics,
    get_all_tasks_by_topic,
    get_user_field,
    get_random_task,
    update_user,
    all_tasks_completed,
    mark_task_completed,
    add_score,
    add_feedback,
    get_available_levels_for_topic,
    get_all_topics_by_category,
    get_completed_task_ids,
    update_streak_and_reward,
    get_user_completed_count,
    get_topic_streak, set_topic_streak, inc_topic_streak, reset_topic_streak,
    has_topic_streak_award, mark_topic_streak_award,

)


HELP_TEXT = """
üÜò <b>–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –∑–≤'—è–∑–æ–∫</b>

<b>FAQ:</b>
‚Äî <b>–©–æ —Ü–µ –∑–∞ –±–æ—Ç?</b>
–¶–µ –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑–∞–¥–∞—á –ù–ú–¢ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏.

‚Äî <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å?</b>
–û–±–∏—Ä–∞–π —Ç–µ–º—É, –≤–∏—Ä—ñ—à—É–π –∑–∞–¥–∞—á—ñ, –æ—Ç—Ä–∏–º—É–π –±–∞–ª–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å —Ç–∞ –ø—Ä–æ—Ö–æ–¥—å —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ.

‚Äî <b>–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–µ–º—É / —î –±–∞–≥</b>
–ü–∏—à–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!
"""

start_task_state = {}

def build_task_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)

def build_level_keyboard(levels):
    buttons = [[KeyboardButton(lvl)] for lvl in levels]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def task_entrypoint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    topics = get_all_topics()
    if not topics:
        await update.message.reply_text("‚ùå –ó–∞—Ä–∞–∑ —É –±–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏ —ñ–∑ –∑–∞–¥–∞—á–∞–º–∏.")
        return
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=build_topic_keyboard())
    start_task_state[user_id] = {"step": "topic"}

async def handle_task_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in start_task_state:
        state = start_task_state[user_id]

        # –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if state["step"] == "category" and text in CATEGORIES:
            state["category"] = text
            from db import get_all_topics_by_category
            topics = get_all_topics_by_category(text)
            if not topics:
                await update.message.reply_text(
                    "‚ùå –£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–µ–º.\n\n–ù–∞—Ç–∏—Å–Ω–∏ ¬´‚Ü©Ô∏è –ú–µ–Ω—é¬ª, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.",
                    reply_markup=build_back_to_menu_keyboard()
                )
                return

            state["step"] = "topic"
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=build_topic_keyboard(topics))
            return
        
        # —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞–∑–∞–¥ -> –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if state["step"] == "topic" and text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            state["step"] = "category"
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                reply_markup=build_category_keyboard()
            )
            return


        # –≤–∏–±—ñ—Ä —Ç–µ–º–∏
        topics = get_all_topics()  # –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä—É–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—â–æ —Ç—Ä–µ–±–∞
        if state["step"] == "topic" and text in topics:
            available_levels = set([t["level"] for t in get_all_tasks_by_topic(text)])
            if not available_levels:
                await update.message.reply_text("‚ùå –î–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–∞–¥–∞—á—ñ.")
                del start_task_state[user_id]
                return
            update_user(user_id, "topic", text)
            state["step"] = "level"
            buttons = [[KeyboardButton(lvl)] for lvl in LEVELS if lvl in available_levels]
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ –æ–±—Ä–∞–Ω–∞: {text} ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        elif state["step"] == "level" and text in LEVELS:
            topic = get_user_field(user_id, "topic")
            # --- –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ü—ñ—î—ó —Ç–µ–º–∏
            all_tasks = get_all_tasks_by_topic(topic)
            # --- —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–¥–∞—á—ñ —Å–∞–º–µ —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è
            level_tasks = [t for t in all_tasks if t["level"] == text]
            if not level_tasks:
                await update.message.reply_text(
                    f"‚ùå –î–ª—è —Ä—ñ–≤–Ω—è ¬´{text}¬ª –∑–∞–¥–∞—á –Ω–µ–º–∞—î!",
                    reply_markup=build_main_menu(user_id)
                )
                del start_task_state[user_id]
                return

            # --- –≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–¥–∞—á—ñ
            # --- –±–µ—Ä–µ–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è (–î–û–ó–í–û–õ–Ø–Ñ–ú–û –ø–µ—Ä–µ–ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è)
            completed_ids = set(get_completed_task_ids(user_id, topic, text))  # –∑–±–µ—Ä–µ–∂–µ–º–æ, —â–æ–± –∑–Ω–∞—Ç–∏ —è–∫—ñ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ
            tasks = level_tasks  # –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ

            # --- –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è (–¥–æ–¥–∞—î–º–æ completed_ids)
            solving_state[user_id] = {
                "topic": topic,
                "level": text,
                "task_ids": [t["id"] for t in tasks],
                "completed_ids": completed_ids,   # <- –≤–∞–∂–ª–∏–≤–æ
                "current": 0,
            }

            await send_next_task(update, context, user_id)
            del start_task_state[user_id]
            return

async def send_next_task(update, context, user_id):
    state = solving_state[user_id]
    idx = state["current"]
    task_id = state["task_ids"][idx]
    from db import get_task_by_id
    task = get_task_by_id(task_id)
    already_done = task_id in (solving_state[user_id].get("completed_ids") or set())
    state["current_task"] = task
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–¥–∞—á—É (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ)
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é"), KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)
    task_text = f"üìò {task['topic']} ({task['level']})\n\n{task['question']}"

        # –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ: –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Ä—ñ—é —É —Ç–µ–º—ñ
    try:
        cur_streak = get_topic_streak(user_id, state["topic"])
        if cur_streak > 0:
            task_text = f"üî• –°–µ—Ä—ñ—è –≤ —Ç–µ–º—ñ: {cur_streak}\n\n" + task_text
    except Exception:
        pass


    # ‚¨áÔ∏è —è–∫—â–æ –∑–∞–¥–∞—á–∞ –≤–∂–µ –±—É–ª–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º–æ –ø–ª–∞—à–∫—É "–ø–æ–≤—Ç–æ—Ä"
    if already_done:
        task_text = "üîÅ (–ø–æ–≤—Ç–æ—Ä, –±–µ–∑ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤)\n\n" + task_text


    if task.get("photo"):
        await update.message.reply_photo(
            task["photo"], caption=task_text, reply_markup=kb
        )
    else:
        await update.message.reply_text(task_text, reply_markup=kb)


async def handle_task_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in solving_state:
        state = solving_state[user_id]
        task = state.get("current_task")
        if text == "‚Ü©Ô∏è –ú–µ–Ω—é":
            solving_state.pop(user_id, None)
            await update.message.reply_text(
                "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(user_id)
            )
            return
        explanation = task["explanation"].strip() if task["explanation"] else "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!"

        # === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ + —Å–∫–æ—Ä–∏–Ω–≥ (—î–¥–∏–Ω–∏–π –±–ª–æ–∫) ===
        user_answers = [a.strip() for a in text.replace(';', ',').split(',') if a.strip()]
        correct_answers = [a.strip() for a in task["answer"]]
        task_type = (task.get("task_type") or "").lower()

        if task_type == "match":
            # —á–∞—Å—Ç–∫–æ–≤—ñ –∑–±—ñ–≥–∏ ‚Äî —Ä–∞—Ö—É—î–º–æ; –ø–æ–≤–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å, —è–∫—â–æ –≤–≥–∞–¥–∞–Ω–æ –≤—Å—ñ
            match_correct = len(set(user_answers) & set(correct_answers))
            is_correct = (match_correct == len(correct_answers))
        else:
            # —ñ–Ω—à—ñ —Ç–∏–ø–∏ ‚Äî –ø–æ–≤–Ω–∏–π –∑–±—ñ–≥ –º–Ω–æ–∂–∏–Ω (–ø–æ—Ä—è–¥–æ–∫ –Ω–µ–≤–∞–∂–ª–∏–≤–∏–π)
            match_correct = 0
            is_correct = (
                len(user_answers) == len(correct_answers) and
                set(user_answers) == set(correct_answers)
            )

        # —á–∏ —Ü–µ –ø–æ–≤—Ç–æ—Ä–Ω–µ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è
        already_done = task["id"] in (state.get("completed_ids") or set())

        # –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ñ –±–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ
        if already_done:
            delta = 0
        else:
            delta = calc_points(task, is_correct=is_correct, match_correct=match_correct)

        if delta > 0:
            add_score(user_id, delta)

        if is_correct:
            if already_done:
                msg = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–ø–æ–≤—Ç–æ—Ä) –ë–∞–ª—ñ–≤ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."
            else:
                msg = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{delta} –±–∞–ª—ñ–≤ üéâ" if delta > 0 else "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n‚ö†Ô∏è –ë–∞–ª–∏ –∑–∞ —Ü—é –∑–∞–¥–∞—á—É –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."


        msg += f"\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation}"
        await update.message.reply_text(msg)

        # --------------------------
        # –°–µ—Ä—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —É –º–µ–∂–∞—Ö —Ç–µ–º–∏ (–ª–∏—à–µ –ø–µ—Ä—à—ñ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è)
        topic = state["topic"]
        TOPIC_STREAK_MILESTONES = {5: 5, 10: 10, 15: 25, 20: 40, 30: 60}

        if not already_done:
            if is_correct:
                new_streak = inc_topic_streak(user_id, topic)
                awarded_msgs = []
                for m, bonus in TOPIC_STREAK_MILESTONES.items():
                    if new_streak >= m and not has_topic_streak_award(user_id, topic, m):
                        add_score(user_id, bonus)
                        mark_topic_streak_award(user_id, topic, m)
                        awarded_msgs.append(f"üèÖ –°–µ—Ä—ñ—è {m} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —É —Ç–µ–º—ñ ¬´{topic}¬ª! +{bonus} –±–∞–ª—ñ–≤")
                if awarded_msgs:
                    await update.message.reply_text("\n".join(awarded_msgs))
            else:
                # –ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ –Ω–∞ —Ü—é –∑–∞–¥–∞—á—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ -> —Å–∫–∏–¥–∞—î–º–æ —Å–µ—Ä—ñ—é
                reset_topic_streak(user_id, topic)
        # —è–∫—â–æ already_done == True (–ø–æ–≤—Ç–æ—Ä), —Å–µ—Ä—ñ—é –Ω–µ —á—ñ–ø–∞—î–º–æ
        # --------------------------


        # --- streak & –±–æ–Ω—É—Å–∏ –∑–∞ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω—ñ –¥–Ω—ñ
        streak, bonus = update_streak_and_reward(user_id)
        if bonus > 0:
            await update.message.reply_text(
                f"üî• –°–µ—Ä—ñ—è: {streak} –¥–Ω—ñ(–≤) –ø—ñ–¥—Ä—è–¥! –ë–æ–Ω—É—Å +{bonus} –±–∞–ª—ñ–≤."
            )
        
        # —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ –Ω–∞ —Ü—é –∑–∞–¥–∞—á—É ‚Äî —Å–∫–∏–¥–∞—î–º–æ —Å–µ—Ä—ñ—é —É —Ç–µ–º—ñ
        already_done = task["id"] in (state.get("completed_ids") or set())
        if not already_done:
            reset_topic_streak(user_id, state["topic"])


        mark_task_completed(user_id, task["id"])
        state["current"] += 1
        if state["current"] < len(state["task_ids"]):
            is_daily = state.get("is_daily", False)
            if is_daily:
                await update.message.reply_text(
                    "üéâ –í—ñ—Ç–∞—é! –í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ —â–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É!",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                )
                solving_state.pop(user_id, None)
                return

            await send_next_task(update, context, user_id)
        else:
            # –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            is_daily = state.get("is_daily", False)
            if is_daily:
                await update.message.reply_text(
                    "üéâ –ì–æ—Ç–æ–≤–æ! –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–∞.\n"
                    "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ –ø–æ –Ω–æ–≤—É üí™",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                )
                solving_state.pop(user_id, None)
                return

            # --- –∑–≤–∏—á–∞–π–Ω—ñ (–Ω–µ daily) –∑–∞–¥–∞—á—ñ: –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è ---
            topic = state["topic"]
            current_level = state["level"]
            available_levels = get_available_levels_for_topic(topic, exclude_level=current_level)

            keyboard = []
            if available_levels:
                keyboard.append([KeyboardButton(lvl) for lvl in available_levels])
            keyboard.append([KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É")])
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")])

            await update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è ¬´{current_level}¬ª.\n"
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            # --- –ë–æ–Ω—É—Å –∑–∞ —Ç–µ–º—É ‚â•70% (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –±–µ–∑ –±–µ–π–¥–∂–∞) ---
            try:
                # –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –ø–æ –í–°–Ü–ô —Ç–µ–º—ñ (—É—Å—ñ —Ä—ñ–≤–Ω—ñ)
                all_tasks_in_topic = get_all_tasks_by_topic(topic)  # –±–µ–∑ is_daily => –∑–≤–∏—á–∞–π–Ω—ñ –∑–∞–¥–∞—á—ñ
                total_in_topic = len(all_tasks_in_topic)

                # –°–∫—ñ–ª—å–∫–∏ –∑–∞–¥–∞—á —É —Ç–µ–º—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø–æ –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—è—Ö
                completed_in_topic = sum(
                    get_user_completed_count(user_id, topic, lvl)
                    for lvl in {"–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"}
                )

                if total_in_topic > 0:
                    percent = completed_in_topic / total_in_topic
                    if percent >= 0.70:
                        # –ù–∞—Ä–∞—Ö—É—î–º–æ +20 –±–∞–ª—ñ–≤ (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—ñ–≤)
                        add_score(user_id, 20)
                        await update.message.reply_text("üèÜ –¢–∏ –ø—Ä–æ–π—à–æ–≤ —Ç–µ–º—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ‚â•70%! +20 –±–∞–ª—ñ–≤ üéâ")
            except Exception as e:
                # –ë–µ–∑–ø–µ—á–Ω–∏–π fallback, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ –ø–æ—Ç—ñ–∫
                # –ú–æ–∂–µ—à –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ e, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                pass

            solving_state.pop(user_id, None)

        return

async def handle_dont_know(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in solving_state:
        state = solving_state[user_id]
        task = state.get("current_task")
        await update.message.reply_text(
            f"ü§î –û–±—Ä–∞–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç '–ù–µ –∑–Ω–∞—é'.\n‚ö†Ô∏è –ë–∞–ª–∏ –∑–∞ —Ü—é –∑–∞–¥–∞—á—É –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.\n\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {task['explanation'].strip() if task['explanation'] else '–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!'}"
        )

        # --- streak & –±–æ–Ω—É—Å–∏ –∑–∞ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω—ñ –¥–Ω—ñ (—Ä–∞—Ö—É—î–º–æ —è–∫ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)
        streak, bonus = update_streak_and_reward(user_id)
        if bonus > 0:
            await update.message.reply_text(
                f"üî• –°–µ—Ä—ñ—è: {streak} –¥–Ω—ñ(–≤) –ø—ñ–¥—Ä—è–¥! –ë–æ–Ω—É—Å +{bonus} –±–∞–ª—ñ–≤."
            )


        mark_task_completed(user_id, task["id"])
        state["current"] += 1
        if state["current"] < len(state["task_ids"]):
            is_daily = state.get("is_daily", False)
            if is_daily:
                await update.message.reply_text(
                    "üéâ –í—ñ—Ç–∞—é! –í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ —â–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É!",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                )
                solving_state.pop(user_id, None)
                return
            await send_next_task(update, context, user_id)
        else:
            # –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            is_daily = state.get("is_daily", False)
            if is_daily:
                await update.message.reply_text(
                    "üéØ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    "‚ö†Ô∏è –ó–∞ —Ü—é –∑–∞–¥–∞—á—É –±–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                )
                solving_state.pop(user_id, None)
                return

            # --- –∑–≤–∏—á–∞–π–Ω—ñ (–Ω–µ daily) –∑–∞–¥–∞—á—ñ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è ---
            topic = state["topic"]
            current_level = state["level"]
            available_levels = get_available_levels_for_topic(topic, exclude_level=current_level)

            keyboard = []
            if available_levels:
                keyboard.append([KeyboardButton(lvl) for lvl in available_levels])
            keyboard.append([KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É")])
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")])

            await update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è ¬´{current_level}¬ª.\n"
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            solving_state.pop(user_id, None)


        return



async def main_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    username = update.effective_user.username or ""
    if username:
        update_user(user_id, "username", username)

    if text == "üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=build_category_keyboard())
        start_task_state[user_id] = {"step": "category"}
        return


    if text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É":
        change_name_state[user_id] = True
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º º—è (2-20 —Å–∏–º–≤–æ–ª—ñ–≤):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return

    if change_name_state.get(user_id):
        if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            del change_name_state[user_id]
            await update.message.reply_text(
                "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.",
                reply_markup=build_main_menu(user_id)
            )
            return
        new_name = text.strip()
        if not (2 <= len(new_name) <= 20):
            await update.message.reply_text("–Ü–º º—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        update_user(user_id, "display_name", new_name)
        del change_name_state[user_id]
        await update.message.reply_text(
            f"‚úÖ –í–∞—à–µ —ñ–º º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_name}</b>",
            parse_mode="HTML"
        )
        # –û–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        await show_rating(update, context)
        return

    # if text == "üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏":
    #     msg = "<b>–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢:</b>\n\n"
    #     for m in MATERIALS:
    #         msg += f"üîó <a href='{m['url']}'>{m['title']}</a>\n"
    #     await update.message.reply_text(
    #         msg,
    #         parse_mode="HTML",
    #         disable_web_page_preview=False
    #     )
    #     return

    if text == "üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏":
        buttons = [
            [InlineKeyboardButton(m["title"], url=m["url"])] for m in MATERIALS
        ]
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

    if text in LEVELS and user_id not in start_task_state:
        # –•–æ—á–µ –ø—Ä–æ–π—Ç–∏ —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ handle_task_step
        start_task_state[user_id] = {"step": "level"}
        await handle_task_step(update, context)
        return
    if text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É":
        await task_entrypoint(update, context)
        return
    
    if text == "‚Ü©Ô∏è –ú–µ–Ω—é":
        solving_state.pop(user_id, None)  # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return


    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        last_menu = user_last_menu.get(user_id)
        if last_menu in ("badges", "rating"):
            await show_progress(update, context)
            user_last_menu[user_id] = "progress"  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
        else:
            await update.message.reply_text(
                "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(user_id)
            )
        return

    if text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        await show_progress(update, context)
        return

    if text == "üõí –ë–æ–Ω—É—Å–∏ / –ë–µ–π–¥–∂—ñ":
        await show_badges(update, context)
        return
    
    if text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        await show_rating(update, context)
        return


    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return


    # --- 1. –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ FAQ ---
    if text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫":
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            HELP_TEXT,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # --- 2. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É" ---
    if text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É":
        feedback_state[user_id] = True
        await update.message.reply_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –π–æ–≥–æ –≤ –∞–¥–º—ñ–Ω—Ü—ñ.\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return

    # --- 3. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ---
    if user_id in feedback_state:
        if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            del feedback_state[user_id]
            await update.message.reply_text(
                "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.",
                reply_markup=build_main_menu(user_id)
            )
            return
        add_feedback(user_id, username, text)
        del feedback_state[user_id]
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=build_main_menu(user_id)
        )
        return

    if text == "üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        await task_entrypoint(update, context)
        return

    if text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        await show_progress(update, context)
        return

    if user_id in start_task_state:
        await handle_task_step(update, context)
        return

    if text == "‚ùì –ù–µ –∑–Ω–∞—é" and user_id in solving_state:
        await handle_dont_know(update, context)
        return

    if user_id in solving_state:
        await handle_task_answer(update, context)
        return


    if text == "üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞":
        await handle_daily_task(update, context)
        return

    if text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫":
        # FAQ + –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤‚Äô—è–∑–∫—É
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            HELP_TEXT,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É"
    if text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É":
        await update.message.reply_text(
            "–ù–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —É Telegram: @ostapsalo",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True
            ),
            disable_web_page_preview=True
        )
        return

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return
    
def build_topic_keyboard(topics=None):
    if topics is None:
        topics = get_all_topics()
    if not topics:
        return ReplyKeyboardMarkup([[KeyboardButton("‚ùå –ù–µ–º–∞—î —Ç–µ–º")]], resize_keyboard=True)
    return ReplyKeyboardMarkup(
        [[KeyboardButton(t)] for t in topics] + [[KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

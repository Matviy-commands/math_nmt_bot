from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from handlers.progress import show_progress, show_rating
from handlers.daily import handle_daily_task
from handlers.badges import show_badges
from handlers.materials import MATERIALS
from handlers.scoring import calc_points
from db import update_streak_and_reward, update_user

from handlers.utils import (
    build_main_menu,
    build_category_keyboard,
    build_back_to_menu_keyboard,
    build_topics_keyboard,
    CATEGORIES,               
    LEVELS,
)

from db import (
    get_all_topics,
    get_all_tasks_by_topic,
    get_user_field,
    get_random_task,
    update_user,
    all_tasks_completed,
    mark_task_completed,
    add_score,
    add_feedback,
    get_available_levels_for_topic,
    get_all_topics_by_category,
    get_completed_task_ids,
    update_streak_and_reward,
    get_user_completed_count,
    get_topic_streak, set_topic_streak, inc_topic_streak, reset_topic_streak,
    has_topic_streak_award, mark_topic_streak_award,
)


HELP_TEXT = """
üÜò <b>–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –∑–≤'—è–∑–æ–∫</b>

<b>FAQ:</b>
‚Äî <b>–©–æ —Ü–µ –∑–∞ –±–æ—Ç?</b>
–¶–µ –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑–∞–¥–∞—á –ù–ú–¢ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏.

‚Äî <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å?</b>
–û–±–∏—Ä–∞–π —Ç–µ–º—É, –≤–∏—Ä—ñ—à—É–π –∑–∞–¥–∞—á—ñ, –æ—Ç—Ä–∏–º—É–π –±–∞–ª–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å —Ç–∞ –ø—Ä–æ—Ö–æ–¥—å —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ.

‚Äî <b>–Ø –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–µ–º—É / —î –±–∞–≥</b>
–ü–∏—à–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!
"""

def build_task_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)

def build_level_keyboard(levels):
    buttons = [[KeyboardButton(lvl)] for lvl in levels]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def task_entrypoint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = get_all_topics()
    if not topics:
        await update.message.reply_text("‚ùå –ó–∞—Ä–∞–∑ —É –±–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏ —ñ–∑ –∑–∞–¥–∞—á–∞–º–∏.")
        return
    # <-- –í–ò–ü–†–ê–í–õ–ï–ù–û: 'build_topics_keyboard' —ñ –¥–æ–¥–∞–Ω–æ "–ù–∞–∑–∞–¥"
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=build_topics_keyboard(topics + ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]))
    context.user_data['start_task_state'] = {"step": "topic"}

async def handle_task_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if 'start_task_state' in context.user_data:
        state = context.user_data['start_task_state']

        if state["step"] == "category" and text in CATEGORIES:
            state["category"] = text
            from db import get_all_topics_by_category
            topics = get_all_topics_by_category(text)
            if not topics:
                await update.message.reply_text(
                    "‚ùå –£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ç–µ–º.\n\n–ù–∞—Ç–∏—Å–Ω–∏ ¬´‚Ü©Ô∏è –ú–µ–Ω—é¬ª, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.",
                    reply_markup=build_back_to_menu_keyboard()
                )
                return

            state["step"] = "topic"
             # <-- –í–ò–ü–†–ê–í–õ–ï–ù–û: 'build_topics_keyboard' —ñ –¥–æ–¥–∞–Ω–æ "–ù–∞–∑–∞–¥"
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=build_topics_keyboard(topics + ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]))
            return
        
        if state["step"] == "topic" and text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            state["step"] = "category"
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                reply_markup=build_category_keyboard()
            )
            return

        topics = get_all_topics()
        if state["step"] == "topic" and text in topics:
            available_levels = set([t["level"] for t in get_all_tasks_by_topic(text)])
            if not available_levels:
                await update.message.reply_text("‚ùå –î–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–∞–¥–∞—á—ñ.")
                context.user_data.pop('start_task_state', None)
                return
            update_user(user_id, "topic", text)
            state["step"] = "level"
            buttons = [[KeyboardButton(lvl)] for lvl in LEVELS if lvl in available_levels]
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ –æ–±—Ä–∞–Ω–∞: {text} ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        elif state["step"] == "level" and text in LEVELS:
            topic = get_user_field(user_id, "topic")
            all_tasks = get_all_tasks_by_topic(topic)
            level_tasks = [t for t in all_tasks if t["level"] == text]
            if not level_tasks:
                await update.message.reply_text(
                    f"‚ùå –î–ª—è —Ä—ñ–≤–Ω—è ¬´{text}¬ª –∑–∞–¥–∞—á –Ω–µ–º–∞—î!",
                    reply_markup=build_main_menu(user_id)
                )
                context.user_data.pop('start_task_state', None)
                return

            completed_ids = set(get_completed_task_ids(user_id, topic, text))
            
            uncompleted_tasks = [t for t in level_tasks if t["id"] not in completed_ids]

            tasks_to_solve = []
            reply_text = ""

            if uncompleted_tasks:
                tasks_to_solve = uncompleted_tasks
                reply_text = f"‚úÖ –¢–µ–º–∞: {topic} ({text}). –ü–æ—á–∏–Ω–∞—î–º–æ! –ó–∞–¥–∞—á —É —á–µ—Ä–∑—ñ: {len(tasks_to_solve)}"
            else:
                tasks_to_solve = level_tasks
                reply_text = f"üëç –¢–∏ –≤–∂–µ –≤—Å–µ –≤–∏—Ä—ñ—à–∏–≤ —É —Ü—ñ–π —Ç–µ–º—ñ! –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω–µ –∫–æ–ª–æ (–±–µ–∑ –±–∞–ª—ñ–≤)."

            if not tasks_to_solve:
                await update.message.reply_text(
                    f"‚ùå –î–ª—è —Ä—ñ–≤–Ω—è ¬´{text}¬ª –¥–∏–≤–Ω–∏–º —á–∏–Ω–æ–º –Ω–µ –∑–Ω–∞–π—à–ª–æ—Å—å –∑–∞–¥–∞—á.",
                    reply_markup=build_main_menu(user_id)
                )
                context.user_data.pop('start_task_state', None)
                return

            await update.message.reply_text(reply_text) 

            context.user_data['solving_state'] = {
                "topic": topic,
                "level": text,
                "task_ids": [t["id"] for t in tasks_to_solve],
                "completed_ids": completed_ids,
                "current": 0,
            }

            await send_next_task(update, context, user_id)
            context.user_data.pop('start_task_state', None)
            return

async def send_next_task(update, context, user_id):
    state = context.user_data['solving_state']
    idx = state["current"]
    task_id = state["task_ids"][idx]
    from db import get_task_by_id
    task = get_task_by_id(task_id)
    already_done = task_id in (state.get("completed_ids") or set())
    state["current_task"] = task
    
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é"), KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)
    task_text = f"üìò {task['topic']} ({task['level']})\n\n{task['question']}"

    try:
        cur_streak = get_topic_streak(user_id, state["topic"])
        if cur_streak > 0:
            task_text = f"üî• –°–µ—Ä—ñ—è –≤ —Ç–µ–º—ñ: {cur_streak}\n\n" + task_text
    except Exception:
        pass

    if already_done:
        task_text = "üîÅ (–ø–æ–≤—Ç–æ—Ä, –±–µ–∑ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤)\n\n" + task_text

    if task.get("photo"):
        await update.message.reply_photo(
            task["photo"], caption=task_text, reply_markup=kb
        )
    else:
        await update.message.reply_text(task_text, reply_markup=kb)



async def handle_task_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if 'solving_state' in context.user_data:
        state = context.user_data['solving_state']
        task = state.get("current_task")
        if text == "‚Ü©Ô∏è –ú–µ–Ω—é":
            context.user_data.pop('solving_state', None)
            await update.message.reply_text(
                "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(user_id)
            )
            return
        explanation = task["explanation"].strip() if task["explanation"] else "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!"

        user_answers = [a.strip() for a in text.replace(';', ',').split(',') if a.strip()]
        correct_answers = [a.strip() for a in task["answer"]]
        task_type = (task.get("task_type") or "").lower()

        if task_type == "match":
            match_correct = len(set(user_answers) & set(correct_answers))
            is_correct = (match_correct == len(correct_answers))
        else:
            match_correct = 0
            is_correct = (
                len(user_answers) == len(correct_answers) and
                set(user_answers) == set(correct_answers)
            )

        already_done = task["id"] in (state.get("completed_ids") or set())

        if already_done:
            delta = 0
        else:
            delta = calc_points(task, is_correct=is_correct, match_correct=match_correct)

        if delta > 0:
            add_score(user_id, delta)

        if is_correct:
            if already_done:
                msg = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! (–ø–æ–≤—Ç–æ—Ä) –ë–∞–ª—ñ–≤ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."
            else:
                msg = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{delta} –±–∞–ª—ñ–≤ üéâ" if delta > 0 else "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n‚ö†Ô∏è –ë–∞–ª–∏ –∑–∞ —Ü—é –∑–∞–¥–∞—á—É –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ."


        msg += f"\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation}"
        await update.message.reply_text(msg)

        try:
            topic = state["topic"]
            is_daily = state.get("is_daily", False)

            if (not is_daily) and is_correct and not already_done:
                total_in_topic = len(get_all_tasks_by_topic(topic))
                completed_in_topic = sum(
                    get_user_completed_count(user_id, topic, lvl)
                    for lvl in {"–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"}
                )
                completed_after = completed_in_topic + 1

                if total_in_topic > 0:
                    percent_after = completed_after / total_in_topic
                    if percent_after >= 0.70 and not has_topic_streak_award(user_id, topic, 70):
                        add_score(user_id, 20)
                        mark_topic_streak_award(user_id, topic, 70)
                        await update.message.reply_text("üèÜ –¢–∏ –ø—Ä–æ–π—à–æ–≤ —Ç–µ–º—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ‚â•70%! +20 –±–∞–ª—ñ–≤ üéâ")
        except Exception:
            pass
        
        topic = state["topic"]
        is_daily = state.get("is_daily", False)
        TOPIC_STREAK_MILESTONES = {5: 5, 10: 10, 15: 25, 20: 40, 30: 60}

        if not is_daily:
            if is_correct and not already_done:
                new_streak = inc_topic_streak(user_id, topic)
                awarded_msgs = []
                for m in sorted(TOPIC_STREAK_MILESTONES):
                    bonus = TOPIC_STREAK_MILESTONES[m]
                    if new_streak >= m and not has_topic_streak_award(user_id, topic, m):
                        add_score(user_id, bonus)
                        mark_topic_streak_award(user_id, topic, m)
                        awarded_msgs.append(f"üèÖ –°–µ—Ä—ñ—è {m} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —É —Ç–µ–º—ñ ¬´{topic}¬ª! +{bonus} –±–∞–ª—ñ–≤")

                if awarded_msgs:
                    await update.message.reply_text("\n".join(awarded_msgs))
            elif not is_correct:
                reset_topic_streak(user_id, topic)
        
        streak, bonus = update_streak_and_reward(user_id)
        if bonus > 0:
            await update.message.reply_text(
                f"üî• –°–µ—Ä—ñ—è: {streak} –¥–Ω—ñ(–≤) –ø—ñ–¥—Ä—è–¥! –ë–æ–Ω—É—Å +{bonus} –±–∞–ª—ñ–≤."
            )
        

        mark_task_completed(user_id, task["id"])
        state["current"] += 1
        if state["current"] < len(state["task_ids"]):
            is_daily = state.get("is_daily", False)
            if is_daily:
                if is_correct:
                    # add_score(user_id, 5)
                    await update.message.reply_text(
                        "üéâ –í—ñ—Ç–∞—é! –©–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É –≤–∏–∫–æ–Ω–∞–Ω–æ!",
                        # "üéâ –í—ñ—Ç–∞—é! –©–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É –≤–∏–∫–æ–Ω–∞–Ω–æ! +5 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤.",
                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                    )
                else:
                    await update.message.reply_text(
                        "‚úÖ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞. –ë–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ, –∞–ª–µ —Å–µ—Ä—ñ—é –¥–Ω—ñ–≤ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ!",
                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                    )
                context.user_data.pop('solving_state', None)
                return

            await send_next_task(update, context, user_id)
        else:
            is_daily = state.get("is_daily", False)
            if is_daily:
                if is_correct:
                    # add_score(user_id, 5)
                    await update.message.reply_text(
                        "üéâ –ì–æ—Ç–æ–≤–æ! –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–∞.\n"
                        "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ –ø–æ –Ω–æ–≤—É üí™",
                        # "üéâ –ì–æ—Ç–æ–≤–æ! –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–∞. +5 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤.\n"
                        # "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ –ø–æ –Ω–æ–≤—É üí™",
                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                    )
                else:
                     await update.message.reply_text(
                        "‚úÖ –ì–æ—Ç–æ–≤–æ! –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–Ω–∞–Ω–∞. –ë–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.\n"
                        "–ü–æ–≤–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞ –ø–æ –Ω–æ–≤—É üí™",
                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                    )
                context.user_data.pop('solving_state', None)
                return

            topic = state["topic"]
            current_level = state["level"]
            available_levels = get_available_levels_for_topic(topic, exclude_level=current_level)

            keyboard = []
            if available_levels:
                keyboard.append([KeyboardButton(lvl) for lvl in available_levels])
            keyboard.append([KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É")])
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")])

            await update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è ¬´{current_level}¬ª.\n"
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )

            context.user_data.pop('solving_state', None)

        return

async def handle_dont_know(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if 'solving_state' in context.user_data:
        state = context.user_data['solving_state']
        task = state.get("current_task")
        await update.message.reply_text(
            f"ü§î –û–±—Ä–∞–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç '–ù–µ –∑–Ω–∞—é'.\n‚ö†Ô∏è –ë–∞–ª–∏ –∑–∞ —Ü—é –∑–∞–¥–∞—á—É –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.\n\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {task['explanation'].strip() if task['explanation'] else '–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!'}"
        )

        streak, bonus = update_streak_and_reward(user_id)
        if bonus > 0:
            await update.message.reply_text(
                f"üî• –°–µ—Ä—ñ—è: {streak} –¥–Ω—ñ(–≤) –ø—ñ–¥—Ä—è–¥! –ë–æ–Ω—É—Å +{bonus} –±–∞–ª—ñ–≤."
            )

        try:
            topic = state["topic"]
            is_daily = state.get("is_daily", False)
            if not is_daily:
                reset_topic_streak(user_id, topic)
        except Exception:
            pass


        mark_task_completed(user_id, task["id"])
        state["current"] += 1
        if state["current"] < len(state["task_ids"]):
            is_daily = state.get("is_daily", False)
            if is_daily:
                await update.message.reply_text(
                    "üéØ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    "‚ö†Ô∏è –ó–∞ —Ü—é –∑–∞–¥–∞—á—É –±–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                )
                context.user_data.pop('solving_state', None)
                return
            await send_next_task(update, context, user_id)
        else:
            is_daily = state.get("is_daily", False)
            if is_daily:
                await update.message.reply_text(
                    "üéØ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                    "‚ö†Ô∏è –ó–∞ —Ü—é –∑–∞–¥–∞—á—É –±–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")]], resize_keyboard=True)
                )
                context.user_data.pop('solving_state', None)
                return

            topic = state["topic"]
            current_level = state["level"]
            available_levels = get_available_levels_for_topic(topic, exclude_level=current_level)

            keyboard = []
            if available_levels:
                keyboard.append([KeyboardButton(lvl) for lvl in available_levels])
            keyboard.append([KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É")])
            keyboard.append([KeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é")])

            await update.message.reply_text(
                f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ä—ñ–≤–Ω—è ¬´{current_level}¬ª.\n"
                "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É, –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            context.user_data.pop('solving_state', None)

        return



async def main_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    username = update.effective_user.username or ""
    if username:
        update_user(user_id, "username", username)

    if text == "üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=build_category_keyboard())
        context.user_data['start_task_state'] = {"step": "category"}
        return


    if text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É":
        context.user_data['change_name_state'] = True
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º º—è (2-20 —Å–∏–º–≤–æ–ª—ñ–≤):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return
    if 'registration_state' in context.user_data:
        state = context.user_data['registration_state']
        
        if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            context.user_data.pop('registration_state', None)
            await update.message.reply_text(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                reply_markup=build_main_menu(user_id)
            )
            return

        # –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–ª–∏ —ñ–º'—è
        if state.get("step") == "name":
            new_name = text.strip()
            if not (2 <= len(new_name) <= 20):
                await update.message.reply_text("–Ü–º º—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                return
            
            update_user(user_id, "display_name", new_name)
            state["step"] = "city"
            await update.message.reply_text(
                f"‚úÖ –ß—É–¥–æ–≤–æ, {new_name}!\n\n"
                "üìç –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ (—Ü–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —É —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
            )
            return

        # –ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º–∞–ª–∏ –º—ñ—Å—Ç–æ
        elif state.get("step") == "city":
            city = text.strip()
            if not (2 <= len(city) <= 30):
                 await update.message.reply_text("–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                 return
            
            update_user(user_id, "city", city)
            state["step"] = "phone"
            
            # –ó–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω (–∑ –∫–Ω–æ–ø–∫–æ—é "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")
            keyboard = ReplyKeyboardMarkup(
                [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)], [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                resize_keyboard=True, one_time_keyboard=True
            )
            await update.message.reply_text(
                f"‚úÖ –ú—ñ—Å—Ç–æ: {city}.\n\n"
                "üìû –ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º' –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380...):",
                reply_markup=keyboard
            )
            return

        # –ö—Ä–æ–∫ 3: –û—Ç—Ä–∏–º–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–∞–±–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º)
        elif state.get("step") == "phone":
            phone = ""
            if update.message.contact:
                phone = update.message.contact.phone_number
            else:
                phone = text.strip()
            
            # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
            if not (phone.startswith('+') and len(phone) >= 10 and phone[1:].isdigit()):
                 await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...")
                 return

            update_user(user_id, "phone_number", phone)
            context.user_data.pop('registration_state', None)
            
            await update.message.reply_text(
                "üéâ <b>–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!</b>\n\n"
                "–í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É.",
                parse_mode="HTML"
            )
            # –û–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥, –∑–∞—Ä–∞–¥–∏ —è–∫–æ–≥–æ –≤—Å–µ –ø–æ—á–∞–ª–æ—Å—å
            await show_rating(update, context)
            return
            
        return

    if context.user_data.get('change_name_state'):
        if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            context.user_data.pop('change_name_state', None)
            await update.message.reply_text(
                "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.",
                reply_markup=build_main_menu(user_id)
            )
            return
        new_name = text.strip()
        if not (2 <= len(new_name) <= 20):
            await update.message.reply_text("–Ü–º º—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        update_user(user_id, "display_name", new_name)
        context.user_data.pop('change_name_state', None)
        await update.message.reply_text(
            f"‚úÖ –í–∞—à–µ —ñ–º º—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_name}</b>",
            parse_mode="HTML"
        )
        await show_rating(update, context)
        return

    if text == "üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏":
        buttons = [
            [InlineKeyboardButton(m["title"], url=m["url"])] for m in MATERIALS
        ]
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

    if text in LEVELS and 'start_task_state' not in context.user_data:
        context.user_data['start_task_state'] = {"step": "level"}
        await handle_task_step(update, context)
        return
    
    if text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É":
        await task_entrypoint(update, context)
        return
    
    if text == "‚Ü©Ô∏è –ú–µ–Ω—é":
        context.user_data.pop('solving_state', None)
        await update.message.reply_text(
            "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=build_main_menu(user_id)
        )
        return


    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        last_menu = context.user_data.get('user_last_menu')
        if last_menu in ("badges", "rating"):
            await show_progress(update, context)
            context.user_data['user_last_menu'] = "progress"
        else:
            await update.message.reply_text(
                "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(user_id)
            )
        return

    if text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        await show_progress(update, context)
        return

    if text == "üõí –ë–æ–Ω—É—Å–∏ / –ë–µ–π–¥–∂—ñ":
        await show_badges(update, context)
        return
    
    if text == "üèÜ –†–µ–π—Ç–∏–Ω–≥":
        await show_rating(update, context)
        return

    if text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫":
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            HELP_TEXT,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    if text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É":
        context.user_data['feedback_state'] = True
        await update.message.reply_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ú–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –π–æ–≥–æ –≤ –∞–¥–º—ñ–Ω—Ü—ñ.\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)
        )
        return

    if 'feedback_state' in context.user_data:
        if text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            context.user_data.pop('feedback_state', None)
            await update.message.reply_text(
                "–°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.",
                reply_markup=build_main_menu(user_id)
            )
            return
        add_feedback(user_id, username, text)
        context.user_data.pop('feedback_state', None)
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=build_main_menu(user_id)
        )
        return

    if text == "üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞":
        await handle_daily_task(update, context)
        return

    if 'start_task_state' in context.user_data:
        await handle_task_step(update, context)
        return

    if text == "‚ùì –ù–µ –∑–Ω–∞—é" and 'solving_state' in context.user_data:
        await handle_dont_know(update, context)
        return

    if 'solving_state' in context.user_data:
        await handle_task_answer(update, context)
        return

    # –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ –∞–±–æ —Ç–µ–∫—Å—Ç—É
    await update.message.reply_text(
        "–ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=build_main_menu(user_id)
    )

    try:
        update_streak_and_reward(user_id)
    except Exception as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ last_activity –¥–ª—è {user_id}: {e}")
        
    username = update.effective_user.username or ""
    if username:
        update_user(user_id, "username", username)

import os
import datetime
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
# from dotenv import load_dotenv

# load_dotenv()

from handlers.start import start_handler
from handlers.admin import (
    admin_message_handler,
    addtask_handler,
    handle_task_pagination_callback,
    handle_feedback_pagination_callback,
    handle_admin_photo,
)
from handlers.task import main_message_handler, handle_contact
from db import init_db, get_users_for_reengagement 

TOKEN = os.getenv("TELEGRAM_TOKEN")

async def router(update, context):
    text = update.message.text
    if text == "üîê –ê–¥–º—ñ–Ω–∫–∞" or context.user_data.get('admin_menu_state'):
        await admin_message_handler(update, context)
    else:
        await main_message_handler(update, context)


async def check_inactive_users(context: ContextTypes.DEFAULT_TYPE):
    print(f"[{datetime.datetime.now()}] Job 'check_inactive_users': –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É...")
    
    # --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 –¥–Ω—ñ ---
    try:
        # –®—É–∫–∞—î–º–æ —Ç–∏—Ö, —Ö—Ç–æ –±—É–≤ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä—ñ–≤–Ω–æ 3 –¥–Ω—ñ —Ç–æ–º—É
        inactive_users = get_users_for_reengagement(days_ago=3)
        print(f"  > –ó–Ω–∞–π–¥–µ–Ω–æ {len(inactive_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ 3 –¥–Ω—ñ).")
        
        message_text = (
            "üëã –ü—Ä–∏–≤—ñ—Ç! –ü–æ–º—ñ—Ç–∏–ª–∏, —â–æ —Ç–∏ –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–≤.\n\n"
            "–¢–≤–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –≤–∂–µ —Å—É–º—É—é—Ç—å! üß† –ó–∞–¥–∞—á—ñ —Å–∞–º—ñ —Å–µ–±–µ –Ω–µ –≤–∏—Ä—ñ—à–∞—Ç—å.\n\n"
            "–ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é, –∞–±–æ, "
            "—è–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫ —á–∏ –±—Ä–∞–∫—É—î —Ç–µ–º, –Ω–∞–ø–∏—à–∏ –Ω–∞–º —á–µ—Ä–µ–∑ '‚ùì –î–æ–ø–æ–º–æ–≥–∞ / –ó–≤‚Äô—è–∑–æ–∫'."
        )
            
        for (user_id,) in inactive_users:
            try:
                await context.bot.send_message(chat_id=user_id, text=message_text)
                print(f"    > –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —é–∑–µ—Ä—É {user_id}")
            except Exception as e:

                print(f"    > –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —é–∑–µ—Ä—É {user_id}: {e}")

        inactive_users_7 = get_users_for_reengagement(days_ago=7)
        print(f"  > –ó–Ω–∞–π–¥–µ–Ω–æ {len(inactive_users_7)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ 7 –¥–Ω—ñ–≤).")
        
        message_text_7 = (
            "üò• –ú–∏ —Å—É–º—É—î–º–æ –±–µ–∑ —Ç–µ–±–µ... –ú–æ–∂–ª–∏–≤–æ, —â–æ—Å—å –Ω–µ —Ç–∞–∫?\n\n"
            "–ú–∏ –∞–∫—Ç–∏–≤–Ω–æ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ —Ç–∞ —Ç–µ–º–∏. "
            "–î–∞–π –Ω–∞–º –∑–Ω–∞—Ç–∏, —á–æ–≥–æ —Ç–æ–±—ñ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢!"
        )

        for (user_id,) in inactive_users_7:
            try:
                await context.bot.send_message(chat_id=user_id, text=message_text_7)
                print(f"    > –ù–∞–¥—ñ—Å–ª–∞–Ω–æ 7-–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —é–∑–µ—Ä—É {user_id}")
            except Exception as e:
                print(f"    > –ü–û–ú–ò–õ–ö–ê –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ 7-–¥–µ–Ω–Ω–æ–≥–æ —é–∑–µ—Ä—É {user_id}: {e}")

                
    except Exception as e:
        print(f"[–ü–û–ú–ò–õ–ö–ê] –ó–±—ñ–π —É –∑–∞–≤–¥–∞–Ω–Ω—ñ check_inactive_users: {e}")
    
    print(f"[{datetime.datetime.now()}] Job 'check_inactive_users': –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")


def main():
    init_db()
    app = Application.builder().token(TOKEN).build()
    
    job_queue = app.job_queue
    
    run_time = datetime.time(hour=10, minute=0, second=0)
    
    job_queue.run_daily(
        check_inactive_users,
        time=run_time,
        name="daily_check_inactive"
    )
    
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è 'check_inactive_users' –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {run_time} UTC —â–æ–¥–Ω—è.")
    
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_admin_photo))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(CallbackQueryHandler(handle_feedback_pagination_callback, pattern="^feedback_"))
    app.add_handler(CallbackQueryHandler(handle_task_pagination_callback))
    app.add_handler(CommandHandler("addtask", addtask_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, router))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from db import *
import datetime

TOKEN = os.getenv("TOKEN")

admin_ids = [1070282751]
user_states = {}
add_task_state = {}
TOPICS = ["–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è", "–í—ñ–¥—Å–æ—Ç–∫–∏"]
LEVELS = ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    create_or_get_user(user_id)

    keyboard = [
        [KeyboardButton("üìö –í–∏–±—Ä–∞—Ç–∏ —Ç–µ–º—É")],
        [KeyboardButton("üéØ –í–∏–±—Ä–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å")],
        [KeyboardButton("üß† –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å")],
        [KeyboardButton("üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞")],
        [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É")] if user_id in admin_ids else []
    ]
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ üìê\n"
        "–û–±–µ—Ä–∏ —Ç–µ–º—É —Ç–∞ —Ä—ñ–≤–µ–Ω—å, –æ—Ç—Ä–∏–º—É–π –∑–∞–¥–∞—á—ñ –π –æ—Ç—Ä–∏–º—É–π –±–∞–ª–∏!",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def addtask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ.")
        return

    add_task_state[user_id] = {"step": "topic"}
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –∑–∞–¥–∞—á—ñ:")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    create_or_get_user(user_id)

    if text == "üìö –í–∏–±—Ä–∞—Ç–∏ —Ç–µ–º—É":
        buttons = [[KeyboardButton(topic)] for topic in TOPICS]
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

    elif text in TOPICS:
        update_user(user_id, "topic", text)
        await update.message.reply_text(f"‚úÖ –¢–µ–º–∞ –æ–±—Ä–∞–Ω–∞: {text}")

    elif text == "üéØ –í–∏–±—Ä–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å":
        buttons = [[KeyboardButton(lvl)] for lvl in LEVELS]
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

    elif text in LEVELS:
        update_user(user_id, "level", text)
        await update.message.reply_text(f"‚úÖ –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: {text}")

    elif text == "üß† –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        topic = get_user_field(user_id, "topic")
        level = get_user_field(user_id, "level")
        task = get_random_task(topic, level)
        if task:
            user_states[user_id] = task
            await update.message.reply_text(f"üìò {task['topic']} ({task['level']})\n\n{task['question']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∑–∞–¥–∞—á –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ –∞–±–æ —Ä—ñ–≤–Ω—è.")

    elif text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        score = get_user_field(user_id, "score")
        level = get_level_by_score(score or 0)
        await update.message.reply_text(f"üìä –ë–∞–ª–∏: {score}\nüéì –†—ñ–≤–µ–Ω—å: {level}")

    elif text == "üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞":
        today = str(datetime.date.today())
        last_daily = get_user_field(user_id, "last_daily")
        if last_daily == today:
            await update.message.reply_text("üìÜ –¢–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —â–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É —Å—å–æ–≥–æ–¥–Ω—ñ.")
        else:
            task = get_random_task()
            if task:
                update_user(user_id, "last_daily", today)
                user_states[user_id] = task
                await update.message.reply_text(f"üìÖ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞:\n\n{task['question']}")
            else:
                await update.message.reply_text("‚ùå –ó–∞–¥–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    elif text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        if user_id in admin_ids:
            add_task_state[user_id] = {"step": "topic"}
            await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –∑–∞–¥–∞—á—ñ:")
        else:
            await update.message.reply_text("‚õî –¢–æ–±—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è.")

    # –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–¥–∞—á—É
    elif user_id in user_states:
        task = user_states[user_id]
        if text.strip() in task["answer"]:
            add_score(user_id, 10)
            msg = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –±–∞–ª—ñ–≤ üéâ"
        else:
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        msg += f"\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {task['explanation']}"
        await update.message.reply_text(msg)
        del user_states[user_id]

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á (admin flow)
    elif user_id in add_task_state:
        state = add_task_state[user_id]
        data = state.get("data", {})

        if state["step"] == "topic":
            data["topic"] = text
            state["step"] = "level"
            state["data"] = data
            await update.message.reply_text("üü° –í–≤–µ–¥–∏ —Ä—ñ–≤–µ–Ω—å –∑–∞–¥–∞—á—ñ (–ª–µ–≥–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∞–∂–∫–∏–π):")

        elif state["step"] == "level":
            if text not in LEVELS:
                await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å. –í–≤–µ–¥–∏: –ª–µ–≥–∫–∏–π / —Å–µ—Ä–µ–¥–Ω—ñ–π / –≤–∞–∂–∫–∏–π")
                return
            data["level"] = text
            state["step"] = "question"
            state["data"] = data
            await update.message.reply_text("üü¢ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ:")

        elif state["step"] == "question":
            data["question"] = text
            state["step"] = "answer"
            state["data"] = data
            await update.message.reply_text("üî∑ –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É:")

        elif state["step"] == "answer":
            data["answer"] = [a.strip() for a in text.split(",")]
            state["step"] = "explanation"
            state["data"] = data
            await update.message.reply_text("üìò –í–≤–µ–¥–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ:")

        elif state["step"] == "explanation":
            data["explanation"] = text
            add_task(data)
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            del add_task_state[user_id]

def main():
    init_db()  # üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addtask", addtask))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()

import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from db import *
import datetime

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

admin_ids = [1070282751]
user_states = {}
add_task_state = {}
start_task_state = {}

TOPICS = ["–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è", "–í—ñ–¥—Å–æ—Ç–∫–∏"]
LEVELS = ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "–≤–∞–∂–∫–∏–π"]

def build_main_menu(user_id):
    keyboard = [
        [KeyboardButton("üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å")],
        [KeyboardButton("üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞")]
    ]
    if user_id in admin_ids:
        keyboard.append([KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_cancel_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    create_or_get_user(user_id)
    greeting_text = """üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ üìê

üìå –Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç:
‚Ä¢ –û–±–∏—Ä–∞—î—à —Ç–µ–º—É —ñ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
‚Ä¢ –û—Ç—Ä–∏–º—É—î—à –∑–∞–¥–∞—á—ñ –π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –Ω–∞ –Ω–∏—Ö
‚Ä¢ –ù–∞–∫–æ–ø–∏—á—É—î—à –±–∞–ª–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

üèÜ –Ø–∫ –Ω–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –±–∞–ª–∏:
‚Ä¢ +10 –±–∞–ª—ñ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
‚Ä¢ –ú–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å —É üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å

üìö –ù–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ —Ç–∞ –ø—ñ–¥–∫–∞–∑–∫–∏:
‚Ä¢ –ë—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ —Å–∫–æ—Ä–æ ‚Äî —Å—Ç–µ–∂ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!

‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
‚Ä¢ –û–±–µ—Ä–∏ —Ç–µ–º—É üìö —ñ —Ä—ñ–≤–µ–Ω—å üéØ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
‚Ä¢ –û—Ç—Ä–∏–º–∞–π –∑–∞–¥–∞—á—É üß† –∞–±–æ —â–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É üîÅ
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å —ñ –∑–∞—Ä–æ–±–ª—è–π –±–µ–π–¥–∂—ñ!

üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:"""
    await update.message.reply_text(greeting_text, reply_markup=build_main_menu(user_id))

async def addtask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ.")
        return
    add_task_state[user_id] = {"step": "topic"}
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –∑–∞–¥–∞—á—ñ:", reply_markup=build_cancel_keyboard())

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    create_or_get_user(user_id)

    # --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ ---
    if user_id in add_task_state and text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        del add_task_state[user_id]
        await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=build_main_menu(user_id))
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ (admin flow) ---
    if user_id in add_task_state:
        state = add_task_state[user_id]
        data = state.get("data", {})

        if state["step"] == "topic":
            data["topic"] = text
            state["step"] = "level"
            state["data"] = data
            await update.message.reply_text("üü° –í–≤–µ–¥–∏ —Ä—ñ–≤–µ–Ω—å –∑–∞–¥–∞—á—ñ (–ª–µ–≥–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/–≤–∞–∂–∫–∏–π):", reply_markup=build_cancel_keyboard())
            return

        elif state["step"] == "level":
            if text not in LEVELS:
                await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å. –í–≤–µ–¥–∏: –ª–µ–≥–∫–∏–π / —Å–µ—Ä–µ–¥–Ω—ñ–π / –≤–∞–∂–∫–∏–π", reply_markup=build_cancel_keyboard())
                return
            data["level"] = text
            state["step"] = "question"
            state["data"] = data
            await update.message.reply_text("üü¢ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ:", reply_markup=build_cancel_keyboard())
            return

        elif state["step"] == "question":
            data["question"] = text
            state["step"] = "answer"
            state["data"] = data
            await update.message.reply_text("üî∑ –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2, -2):", reply_markup=build_cancel_keyboard())
            return

        elif state["step"] == "answer":
            data["answer"] = [a.strip() for a in text.split(",")]
            state["step"] = "explanation"
            state["data"] = data
            await update.message.reply_text("üìò –í–≤–µ–¥–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–¥–∞—á—ñ:", reply_markup=build_cancel_keyboard())
            return

        elif state["step"] == "explanation":
            data["explanation"] = text
            add_task(data)
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=build_main_menu(user_id))
            del add_task_state[user_id]
            return

    # --- –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É ---
    if text == "üß† –ü–æ—á–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        start_task_state[user_id] = {"step": "topic"}
        real_topics = set([t["topic"] for t in get_all_tasks_by_topic("–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è")] + [t["topic"] for t in get_all_tasks_by_topic("–í—ñ–¥—Å–æ—Ç–∫–∏")])
        buttons = [[KeyboardButton(topic)] for topic in TOPICS if topic in real_topics]
        if not buttons:
            await update.message.reply_text("‚ùå –ó–∞—Ä–∞–∑ —É –±–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Ç–µ–º–∏ —ñ–∑ –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=build_main_menu(user_id))
            return
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
        return

    # --- –õ–æ–≥—ñ–∫–∞ –∫—Ä–æ–∫—ñ–≤ –≤–∏–±–æ—Ä—É –∑–∞–¥–∞—á—ñ ---
    if user_id in start_task_state:
        state = start_task_state[user_id]
        if state["step"] == "topic" and text in TOPICS:
            available_levels = set([t["level"] for t in get_all_tasks_by_topic(text)])
            if not available_levels:
                await update.message.reply_text("‚ùå –î–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∑–∞–¥–∞—á—ñ.", reply_markup=build_main_menu(user_id))
                del start_task_state[user_id]
                return
            update_user(user_id, "topic", text)
            state["step"] = "level"
            buttons = [[KeyboardButton(lvl)] for lvl in LEVELS if lvl in available_levels]
            await update.message.reply_text(
                f"‚úÖ –¢–µ–º–∞ –æ–±—Ä–∞–Ω–∞: {text} ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return
        elif state["step"] == "level" and text in LEVELS:
            topic = get_user_field(user_id, "topic")
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî —á–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ:
            if all_tasks_completed(user_id, topic, text):
                await update.message.reply_text(
                    "üéâ –í—ñ—Ç–∞—é! –¢–∏ –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ü—ñ—î—ó —Ç–µ–º–∏ —Ç–∞ —Ä—ñ–≤–Ω—è!",
                    reply_markup=build_main_menu(user_id)
                )
                del start_task_state[user_id]
                return
            task = get_random_task(topic, text, user_id)
            if task:
                update_user(user_id, "level", text)
                user_states[user_id] = task
                custom_keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)
                await update.message.reply_text(
                    f"üìò {task['topic']} ({task['level']})\n\n{task['question']}",
                    reply_markup=custom_keyboard
                )
                del start_task_state[user_id]
            else:
                await update.message.reply_text(
                    "üéâ –í—ñ—Ç–∞—é! –¢–∏ –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ –∑–∞–¥–∞—á—ñ —Ü—ñ—î—ó —Ç–µ–º–∏ —Ç–∞ —Ä—ñ–≤–Ω—è!",
                    reply_markup=build_main_menu(user_id)
                )
                del start_task_state[user_id]
            return

    # --- "–ù–µ –∑–Ω–∞—é" ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –π –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–µ–Ω—é ---
    if text == "‚ùì –ù–µ –∑–Ω–∞—é" and user_id in user_states:
        task = user_states[user_id]
        explanation = task["explanation"].strip()
        if not explanation:
            explanation = "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!"
        msg = f"üìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation}"
        await update.message.reply_text(msg, reply_markup=build_main_menu(user_id))
        mark_task_completed(user_id, task["id"])
        del user_states[user_id]
        return

    # --- –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–¥–∞—á—É ---
    if user_id in user_states:
        task = user_states[user_id]
        explanation = task["explanation"].strip()
        if not explanation:
            explanation = "–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î!"
        if text.strip() in task["answer"]:
            add_score(user_id, 10)
            msg = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –±–∞–ª—ñ–≤ üéâ"
        else:
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        msg += f"\nüìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation}"
        await update.message.reply_text(msg, reply_markup=build_main_menu(user_id))
        mark_task_completed(user_id, task["id"])
        del user_states[user_id]
        return

    # --- –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
    if text == "üìä –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å":
        score = get_user_field(user_id, "score")
        level = get_level_by_score(score or 0)
        await update.message.reply_text(f"üìä –ë–∞–ª–∏: {score}\nüéì –†—ñ–≤–µ–Ω—å: {level}", reply_markup=build_main_menu(user_id))

    elif text == "üîÅ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞":
        today = str(datetime.date.today())
        last_daily = get_user_field(user_id, "last_daily")
        if last_daily == today:
            await update.message.reply_text("üìÜ –¢–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —â–æ–¥–µ–Ω–Ω—É –∑–∞–¥–∞—á—É —Å—å–æ–≥–æ–¥–Ω—ñ.", reply_markup=build_main_menu(user_id))
        else:
            task = get_random_task(user_id=user_id)
            if task:
                update_user(user_id, "last_daily", today)
                user_states[user_id] = task
                custom_keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é")]], resize_keyboard=True)
                await update.message.reply_text(
                    f"üìÖ –©–æ–¥–µ–Ω–Ω–∞ –∑–∞–¥–∞—á–∞:\n\n{task['question']}",
                    reply_markup=custom_keyboard
                )
            else:
                await update.message.reply_text("‚ùå –ó–∞–¥–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=build_main_menu(user_id))

    elif text == "‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É":
        if user_id in admin_ids:
            add_task_state[user_id] = {"step": "topic"}
            await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –∑–∞–¥–∞—á—ñ:", reply_markup=build_cancel_keyboard())
        else:
            await update.message.reply_text("‚õî –¢–æ–±—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è.", reply_markup=build_main_menu(user_id))

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addtask", addtask))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
